export default'\n<h1>100 теоретических вопросов</h1>\n<details>\n<summary>Список вопросов</summary>\n<nav>\n<a href="#0">1. Как создать объект?</a>\n<a href="#1">2. Что такое прототипы?</a>\n<a href="#2">3. В чем разница между Call, Apply и Bind?</a>\n<a href="#3">4. Что такое JSON и какие у него есть методы?</a>\n<a href="#4">5. Что делает метод Array.slice()?</a>\n<a href="#5">6. Что делаем метод Array.splice()?</a>\n<a href="#6">7. В чем разница между slice() и splice()?</a>\n<a href="#7">8. Как сравниваются объекты (objects) и карты (maps)?</a>\n<a href="#8">9. В чем разница между операторами "==" и "==="?</a>\n<a href="#9">10. Что такое лямбда- или стрелочные функции?</a>\n<a href="#10">11. Почему функции называют объектами первого класса?</a>\n<a href="#11">12. Что такое функция первого порядка?</a>\n<a href="#12">13. Что такое функция высшего порядка?</a>\n<a href="#13">14. Что такое унарная функция?</a>\n<a href="#14">15. Что такое каррирование (currying)?</a>\n<a href="#15">16. Что такое чистая функция?</a>\n<a href="#16">17. Для чего используется ключевое слово "let"?</a>\n<a href="#17">18. В чем разница между let и var?</a>\n<a href="#18">19. Почему в качестве ключевого слова было выбрано слово "let"?</a>\n<a href="#19">20. Как переопределить переменную в блоке switch?</a>\n<a href="#20">21. Что такое временная мертвая зона?</a>\n<a href="#21">22. Что такое немедленно вызываемое функциональное выражение (IIFE, Immediately Invoked Function Expression)?</a>\n<a href="#22">23. В чем заключаются преимущества использования модулей?</a>\n<a href="#23">24. Что такое запоминание или мемоизация?</a>\n<a href="#24">25. Что такое поднятие переменных (hoisting)?</a>\n<a href="#25">26. Что такое класс?</a>\n<a href="#26">27. Что такое замыкание?</a>\n<a href="#27">28. Что такое модуль?</a>\n<a href="#28">29. Зачем нужны модули?</a>\n<a href="#29">30. Что такое область видимости?</a>\n<a href="#30">31. Что такое сервис-воркер (service worker)?</a>\n<a href="#31">32. Как взаимодействовать с объектной моделью документа (Document Object Model, DOM) с помощью сервис-воркеров?</a>\n<a href="#32">33. Как повторно использовать информацию при перезапуске сервис-воркера?</a>\n<a href="#33">34. Что такое индексированная база данных (IndexedDB)?</a>\n<a href="#34">35. Что такое веб-хранилище (Web Storage)?</a>\n<a href="#35">36. Что такое postMessage?</a>\n<a href="#36">37. Что такое куки (cookie)?</a>\n<a href="#37">38. Зачем нужны куки?</a>\n<a href="#38">39. Какими возможностями обладают куки?</a>\n<a href="#39">40. Как удалить куки?</a>\n<a href="#40">41. В чем разница между куки, локальным и сессионным хранилищами?</a>\n<a href="#41">42. В чем главное отличие между локальным и сессионным хранилищами?</a>\n<a href="#42">43. Как получить доступ к веб-хранилищу?</a>\n<a href="#43">44. Какие методы предоставляет сессионное хранилище?</a>\n<a href="#44">45. Какое событие возникает при работе с веб-хранилищем?</a>\n<a href="#45">46. Для чего используется веб-хранилище?</a>\n<a href="#46">47. Как определить поддержку веб-хранилища браузером?</a>\n<a href="#47">48. Как определить поддержку сервис-воркеров браузером?</a>\n<a href="#48">49. Приведите пример веб-воркера</a>\n<a href="#49">50. Назовите ограничения веб-воркеров по работе с DOM</a>\n<a href="#50">51. Что такое промис (обещание, promise)?</a>\n<a href="#51">52. Зачем нужны промисы?</a>\n<a href="#52">53. Назовите три возможных состояния промиса</a>\n<a href="#53">54. Что такое функция обратного вызова (колбек)?</a>\n<a href="#54">55. Зачем нужны колбеки?</a>\n<a href="#55">56. Что такое ад колбеков?</a>\n<a href="#56">57. Что такое события, отправленные сервером (server-sent events, SSE)?</a>\n<a href="#57">58. Как получать сообщения (уведомления или события), отправленные сервером?</a>\n<a href="#58">59. Как проверить поддержку SSE браузером?</a>\n<a href="#59">60. Какие события возникают при работе с SSE?</a>\n<a href="#60">61. Назовите основные правила работы с промисами</a>\n<a href="#61">62. Что такое колбек в колбеке?</a>\n<a href="#62">63. Что такое цепочка из промисов?</a>\n<a href="#63">64. Что такое Promise.all()?</a>\n<a href="#64">65. Что такое Promise.race()?</a>\n<a href="#65">66. Что такое строгий режим?</a>\n<a href="#66">67. Зачем нужен строгий режим?</a>\n<a href="#67">68. Как включить строгий режим?</a>\n<a href="#68">69. Для чего используется двойное отрицание?</a>\n<a href="#69">70. Для чего используется оператор "delete"?</a>\n<a href="#70">71. Для чего используется оператор "typeof"?</a>\n<a href="#71">72. Что такое undefined?</a>\n<a href="#72">73. Что такое null?</a>\n<a href="#73">74. В чем разница между null и undefined?</a>\n<a href="#74">75. Что такое eval?</a>\n<a href="#75">76. В чем разница между window и document?</a>\n<a href="#76">77. Как получить доступ к истории браузера?</a>\n<a href="#77">78. Какие типы данных существуют в JavaScript?</a>\n<a href="#78">79. Что делает isNaN()?</a>\n<a href="#79">80. В чем разница между необъявленными и неопределенными переменными?</a>\n<a href="#80">81. Что такое глобальные переменные?</a>\n<a href="#81">82. Какие проблемы влечет за собой создание глобальных переменных?</a>\n<a href="#82">83. Что такое NaN?</a>\n<a href="#83">84. Что делает isFinite()?</a>\n<a href="#84">85. Что такое поток событий (event flow)?</a>\n<a href="#85">86. Что такое всплытие события?</a>\n<a href="#86">87. Что такое погружение или захват события?</a>\n<a href="#87">88. Как отправить форму на обработку?</a>\n<a href="#88">89. Как получить информацию об операционной системе?</a>\n<a href="#89">90. В чем разница между событиями "DOMContentLoaded" и "load"?</a>\n<a href="#90">91. В чем разница между нативными, хостовыми (принадлежащими среде выполнения кода) и пользовательскими объектами?</a>\n<a href="#91">92. Какие средства используются для откладки кода?</a>\n<a href="#92">93. В чем заключаются преимущества и недостатки промисов по сравнению с колбеками?</a>\n<a href="#93">94. В чем разница между атрибутом и свойством элемента?</a>\n<a href="#94">95. Что такое политика общего происхождения (same-origin policy)?</a>\n<a href="#95">96. Что делает void 0?</a>\n<a href="#96">97. JavaScript - это компилируемый или интерпретируемый язык программирования?</a>\n<a href="#97">98. Чувствителен ли JavaScript к регистру?</a>\n<a href="#98">99. Связаны ли Java и JavaScript?</a>\n<a href="#99">100. Что такое событие (event)?</a>\n<nav>\n</nav></nav></details>\n<a href="#articles">Дополнительная литература</a>\n\n\x3c!-- 1 --\x3e\n<section data-name="1">\n<a name="0"></a><h3>1. Как создать объект?</h3>\n<p>Существует множество способов это сделать. Вот некоторые из них:</p>\n<h5>Конструктор объекта.</h5>\n<p>Простейший способ создать объект - использовать контруктор объекта. Однако, данный способ использовать не рекомендуется.</p>\n<pre><code>\n<span class="code keyword">const</span> object <span class="code operator">=</span> <span class="code keyword">new</span> <span class="code class-name">Object</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\n</code></pre>\n<h5>Метод Object.create()</h5>\n<p>При использовании данного метода ему в качестве аргумента передается объект, который станет прототипом нового объекта.</p>\n<pre><code>\n<span class="code keyword">const</span> object <span class="code operator">=</span> Object<span class="code punctuation">.</span><span class="code function">create</span><span class="code punctuation">(</span><span class="code keyword">null</span><span class="code punctuation">)</span>\n</code></pre>\n<h5>Литерал объекта</h5>\n<p>Синтаксис объектного литерала эквивалентен методу Object.create().</p>\n<pre><code>\n<span class="code keyword">const</span> object <span class="code operator">=</span> <span class="code punctuation">{</span><span class="code punctuation">}</span>\n</code></pre>\n<h5>Функция-конструктор</h5>\n<p>Создаем функцию-конструктор и применяем оператор "new" для создания экземпляра этой функции - объекта.\n</p>\n<pre><code>\n<span class="code keyword">function</span> <span class="code function">Person</span> <span class="code punctuation">(</span><span class="code parameter">name</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code keyword">const</span> object <span class="code operator">=</span> <span class="code punctuation">{</span> <span class="code punctuation">}</span>\n    object<span class="code punctuation">.</span>name <span class="code operator">=</span> name\n    object<span class="code punctuation">.</span>age <span class="code operator">=</span> <span class="code number">30</span>\n    <span class="code keyword">return</span> object\n<span class="code punctuation">}</span>\n<span class="code keyword">const</span> object <span class="code operator">=</span> <span class="code keyword">new</span> <span class="code class-name">Person</span><span class="code punctuation">(</span><span class="code string">\'John\'</span><span class="code punctuation">)</span>\n</code></pre>\n<h5>Функция-конструктор и прототип</h5>\n<p>Данный способ идентичен предыдущему, за исключением того, что для добавления новых свойств и методов используется прототип функции.</p>\n<pre><code>\n<span class="code keyword">function</span> <span class="code function">Person</span> <span class="code punctuation">(</span> <span class="code punctuation">)</span> <span class="code punctuation">{</span> <span class="code punctuation">}</span>\n<span class="code class-name">Person</span><span class="code punctuation">.</span>prototype<span class="code punctuation">.</span>name <span class="code operator">=</span> <span class="code string">\'John\'</span>\n<span class="code keyword">const</span> object <span class="code operator">=</span> <span class="code keyword">new</span> <span class="code class-name">Person</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\n</code></pre>\nЭто похоже на создание экземпляра с помощью Object.create() с прототипом функции и привязку данной функции к\nэкземпляру с параметрами в качестве аргументов.\n<pre><code>\n<span class="code keyword">function</span> f <span class="code punctuation">{</span><span class="code punctuation">}</span>\n<span class="code keyword">new</span> <span class="code class-name">f</span><span class="code punctuation">(</span>x<span class="code punctuation">,</span> y<span class="code punctuation">,</span> z<span class="code punctuation">)</span>\n</code></pre>\n<p>Или:</p>\n<pre><code>\n<span class="code comment">// создаем новый экземпляр, используя прототип функции</span>\n<span class="code keyword">const</span> newInstance <span class="code operator">=</span> Object<span class="code punctuation">.</span><span class="code function">create</span><span class="code punctuation">(</span>f<span class="code punctuation">.</span>prototype<span class="code punctuation">)</span>\n\n<span class="code comment">// привязываем функцию</span>\n<span class="code keyword">const</span> result <span class="code operator">=</span> <span class="code function">f</span><span class="code punctuation">.</span><span class="code function">call</span><span class="code punctuation">(</span>newInstance<span class="code punctuation">,</span> x<span class="code punctuation">,</span> y<span class="code punctuation">,</span> z<span class="code punctuation">)</span>\n\n<span class="code comment">// если result не нулевой объект, используем ее, иначе, используем newInstance</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>result <span class="code operator">&amp;&amp;</span> <span class="code keyword">typeof</span> result <span class="code operator">===</span> <span class="code string">\'object\'</span> <span class="code operator">?</span> result <span class="code operator">:</span> newInstance<span class="code punctuation">)</span>\n</code></pre>\n<h5>Класс</h5>\n<p>Для создания объектов могут использоваться классы.</p>\n<pre><code>\n<span class="code keyword">class</span> <span class="code class-name">Person</span> <span class="code punctuation">{</span>\n    <span class="code function">constructor</span><span class="code punctuation">(</span><span class="code parameter">name</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n        <span class="code keyword">this</span><span class="code punctuation">.</span>name <span class="code operator">=</span> name\n    <span class="code punctuation">}</span>\n<span class="code punctuation">}</span>\n\n<span class="code keyword">const</span> object <span class="code operator">=</span> <span class="code keyword">new</span> <span class="code class-name">Person</span><span class="code punctuation">(</span><span class="code string">\'John\'</span><span class="code punctuation">)</span>\n</code></pre>\n<h5>Шаблон проектирования синглтон (singleton)</h5>\n<p>Сингтон - это объект, допускающий создание только одного экземпляра. Повторные вызовы конструктора данного объекта будут возвращать один и тот же экземпляр. Это позволяет избежать случайного создания нескольких экземпляров одного объекта.</p>\n<pre><code>\n<span class="code keyword">const</span> object <span class="code operator">=</span> <span class="code keyword">new</span> <span class="code class-name">function</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code keyword">this</span><span class="code punctuation">.</span>name <span class="code operator">=</span> <span class="code string">\'John\'</span>\n<span class="code punctuation">}</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/object" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 2 --\x3e\n<section data-name="2">\n<a name="1"></a><h3>2. Что такое прототипы?</h3>\n<p>Прототипы используется для создания новых объектов на основе существующих. Такая техника называется прототипным наследованием. Прототип экземпляра объекта доступен через Object.getPrototypeOf(object) или свойство __proto__ (внутреннее скрытое свойство [[Prototype]]), а прототип функции-конструктора доступен через Object.prototype.</p>\n<img src="img/1.png" alt="1">\n<nav>\n<a href="https://learn.javascript.ru/prototype-inheritance" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Learn/JavaScript/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D1%8B/Object_prototypes" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 3 --\x3e\n<section data-name="3">\n<a name="2"></a><h3>3. В чем разница между Call, Apply и Bind?</h3>\n<p>Разницу между данными методами можно объяснить с помощью следующих примеров.</p>\n<p>Метод call() вызывает функцию с указанным значением this и аргументами через запятую.</p>\n<pre><code>\n<span class="code keyword">const</span> employee1 <span class="code operator">=</span> <span class="code punctuation">{</span> firstName<span class="code operator">:</span> <span class="code string">\'Иван\'</span><span class="code punctuation">,</span> lastName<span class="code operator">:</span> <span class="code string">\'Иванов\'</span> <span class="code punctuation">}</span>\n<span class="code keyword">const</span> employee2 <span class="code operator">=</span> <span class="code punctuation">{</span> firstName<span class="code operator">:</span> <span class="code string">\'Петр\'</span><span class="code punctuation">,</span> lastName<span class="code operator">:</span> <span class="code string">\'Петров\'</span> <span class="code punctuation">}</span>\n\n<span class="code keyword">function</span> <span class="code function">invite</span> <span class="code punctuation">(</span><span class="code parameter">greet1<span class="code punctuation">,</span> greet2</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    onsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code template-string"><span class="code template-punctuation string">`</span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span>greet1<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string">, </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span><span class="code keyword">this</span><span class="code punctuation">.</span>firstName<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string"> </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span><span class="code keyword">this</span><span class="code punctuation">.</span>lastName<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string">. </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span>greet2<span class="code interpolation-punctuation punctuation">}</span></span><span class="code template-punctuation string">`</span></span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span>\n\n<span class="code function">invite</span><span class="code punctuation">.</span><span class="code function">call</span><span class="code punctuation">(</span>employee1<span class="code punctuation">,</span> <span class="code string">\'Привет\'</span><span class="code punctuation">,</span> <span class="code string">\'Как дела?\'</span><span class="code punctuation">)</span> <span class="code comment">// Привет, Иван Иванов. Как дела?</span>\n<span class="code function">invite</span><span class="code punctuation">.</span><span class="code function">call</span><span class="code punctuation">(</span>employee2<span class="code punctuation">,</span> <span class="code string">\'Привет\'</span><span class="code punctuation">,</span> <span class="code string">\'Как дела?\'</span><span class="code punctuation">)</span> <span class="code comment">// Привет, Петр Петров. Как дела?</span>\n</code></pre>\n<p>Метод apply() вызывает функцию с указанным значением this и аргументами в виде массива.</p>\n<pre><code>\n<span class="code keyword">const</span> employee1 <span class="code operator">=</span> <span class="code punctuation">{</span> firstName<span class="code operator">:</span> <span class="code string">\'Иван\'</span><span class="code punctuation">,</span> lastName<span class="code operator">:</span> <span class="code string">\'Иванов\'</span> <span class="code punctuation">}</span>\n<span class="code keyword">const</span> employee2 <span class="code operator">=</span> <span class="code punctuation">{</span> firstName<span class="code operator">:</span> <span class="code string">\'Петр\'</span><span class="code punctuation">,</span> lastName<span class="code operator">:</span> <span class="code string">\'Петров\'</span> <span class="code punctuation">}</span>\n\n<span class="code keyword">function</span> <span class="code function">invite</span> <span class="code punctuation">(</span><span class="code parameter">greet1<span class="code punctuation">,</span> greet2</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code template-string"><span class="code template-punctuation string">`</span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span>greet1<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string">, </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span><span class="code keyword">this</span><span class="code punctuation">.</span>firstName<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string"> </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span><span class="code keyword">this</span><span class="code punctuation">.</span>lastName<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string">. </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span>greet2<span class="code interpolation-punctuation punctuation">}</span></span><span class="code template-punctuation string">`</span></span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span>\n\n<span class="code function">invite</span><span class="code punctuation">.</span><span class="code function">apply</span><span class="code punctuation">(</span>employee1<span class="code punctuation">,</span> <span class="code punctuation">[</span><span class="code string">\'Привет\'</span><span class="code punctuation">,</span> <span class="code string">\'Как дела?\'</span><span class="code punctuation">]</span><span class="code punctuation">)</span> <span class="code comment">// Привет, Иван Иванов. Как дела?</span>\n<span class="code function">invite</span><span class="code punctuation">.</span><span class="code function">apply</span><span class="code punctuation">(</span>employee2<span class="code punctuation">,</span> <span class="code punctuation">[</span><span class="code string">\'Привет\'</span><span class="code punctuation">,</span> <span class="code string">\'Как дела?\'</span><span class="code punctuation">]</span><span class="code punctuation">)</span> <span class="code comment">// Привет, Петр Петров. Как дела?</span>\n</code></pre>\n<p>Метод bind() возвращает новую функцию с указанным значением this и позволяет передать ей массив или любое количество аргументов через запятую.</p>\n<pre><code>\n<span class="code keyword">const</span> employee1 <span class="code operator">=</span> <span class="code punctuation">{</span> firstName<span class="code operator">:</span> <span class="code string">\'Иван\'</span><span class="code punctuation">,</span> lastName<span class="code operator">:</span> <span class="code string">\'Иванов\'</span> <span class="code punctuation">}</span>\n<span class="code keyword">const</span> employee2 <span class="code operator">=</span> <span class="code punctuation">{</span> firstName<span class="code operator">:</span> <span class="code string">\'Петр\'</span><span class="code punctuation">,</span> lastName<span class="code operator">:</span> <span class="code string">\'Петров\'</span> <span class="code punctuation">}</span>\n\n<span class="code keyword">function</span> <span class="code function">invite</span> <span class="code punctuation">(</span><span class="code parameter">greet1<span class="code punctuation">,</span> greet2</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code template-string"><span class="code template-punctuation string">`</span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span>greet1<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string">, </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span><span class="code keyword">this</span><span class="code punctuation">.</span>firstName<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string"> </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span><span class="code keyword">this</span><span class="code punctuation">.</span>lastName<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string">. </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span>greet2<span class="code interpolation-punctuation punctuation">}</span></span><span class="code template-punctuation string">`</span></span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span>\n\n<span class="code keyword">const</span> inviteEmployee1 <span class="code operator">=</span> <span class="code function">invite</span><span class="code punctuation">.</span><span class="code function">bind</span><span class="code punctuation">(</span>employee1<span class="code punctuation">)</span>\n<span class="code keyword">const</span> inviteEmployee2 <span class="code operator">=</span> <span class="code function">invite</span><span class="code punctuation">.</span><span class="code function">bind</span><span class="code punctuation">(</span>employee2<span class="code punctuation">)</span>\n<span class="code function">inviteEmployee1</span><span class="code punctuation">(</span><span class="code string">\'Привет\'</span><span class="code punctuation">,</span> <span class="code string">\'Как дела?\'</span><span class="code punctuation">)</span> <span class="code comment">// Привет, Иван Иванов. Как дела?</span>\n<span class="code function">inviteEmployee2</span><span class="code punctuation">(</span><span class="code string">\'Привет\'</span><span class="code punctuation">,</span> <span class="code string">\'Как дела?\'</span><span class="code punctuation">)</span> <span class="code comment">// Привет, Петр Петров. Как дела?</span>\n</code></pre>\n<p>Таким образом, методы call() и apply() вызывают функцию после ее привязки к объекту. Разница между ними состоит в способе передачи аргументов. Эту разницу легко запомнить при помощи первых букв методов: call - это запятая (comma, c), apply - массив (array, a). Метод bind() возвращает новую функцию, привязанную к указаному объекту.</p>\n<nav>\n<a href="https://learn.javascript.ru/call-apply-decorators" target="_blank">JSR - Call/Apply</a>\n<a href="https://learn.javascript.ru/bind" target="_blank">JSR - Bind</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank">MDN - Call</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank">MDN - Apply</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank">MDN - Bind</a>\n</nav>\n</section>\n\n\x3c!-- 4 --\x3e\n<section data-name="4">\n<a name="3"></a><h3>4. Что такое JSON и какие у него есть методы?</h3>\n<p>JSON - это текстовый формат данных, основанный на синтаксисе объектов JavaScript, изобретенный Дугласом Крокфордом. Он используется для передачи данных по сети и, обычно, имеет расширение .json и MIME-тип application/json.</p>\n<p>Разбор (парсинг): преобразует строку в формате JSON в объект.</p>\n<pre><code>\n<span class="code constant">JSON</span><span class="code punctuation">.</span><span class="code function">parse</span><span class="code punctuation">(</span>text<span class="code punctuation">)</span>\n</code></pre>\n<p>Стрингификация: преобразует объект в строку в формате JSON для передачи по сети.</p>\n<pre><code>\n<span class="code constant">JSON</span><span class="code punctuation">.</span><span class="code function">stringify</span><span class="code punctuation">(</span>object<span class="code punctuation">)</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/json" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/JSON" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 5 --\x3e\n<section data-name="5">\n<a name="4"></a><h3>5. Что делает метод Array.slice()?</h3>\n<p>Метод slice() возвращает выбранные элементы массива в виде нового массива. Он возвращает элементы, начиная с индекса, указанного в первом аргументе, и заканчивая, но не включая, индексом, указанном во втором необязательном аргументе. Если второй аргумент отсутствует, то будут извлечены все элементы, начиная с индекса, указанного в первом аргументе.</p>\n<pre><code>\n<span class="code keyword">const</span> arrayIntegers <span class="code operator">=</span> <span class="code punctuation">[</span><span class="code number">1</span><span class="code punctuation">,</span> <span class="code number">2</span><span class="code punctuation">,</span> <span class="code number">3</span><span class="code punctuation">,</span> <span class="code number">4</span><span class="code punctuation">,</span> <span class="code number">5</span><span class="code punctuation">]</span>\n<span class="code keyword">const</span> arrayIntegers1 <span class="code operator">=</span> arrayIntegers<span class="code punctuation">.</span><span class="code function">slice</span><span class="code punctuation">(</span><span class="code number">0</span><span class="code punctuation">,</span> <span class="code number">2</span><span class="code punctuation">)</span> <span class="code comment">// [1, 2]</span>\n<span class="code keyword">const</span> arrayIntegers2 <span class="code operator">=</span> arrayIntegers<span class="code punctuation">.</span><span class="code function">slice</span><span class="code punctuation">(</span><span class="code number">2</span><span class="code punctuation">,</span> <span class="code number">3</span><span class="code punctuation">)</span> <span class="code comment">// [3]</span>\n<span class="code keyword">const</span> arrayIntegers3 <span class="code operator">=</span> arrayIntegers<span class="code punctuation">.</span><span class="code function">slice</span><span class="code punctuation">(</span><span class="code number">4</span><span class="code punctuation">)</span> <span class="code comment">// [5]</span>\n</code></pre>\n<p>Обратите внимание, что данный метод не изменяет исходный массив, а лишь возвращает его подмножество в виде нового массива.</p>\n<nav>\n<a href="https://learn.javascript.ru/array-methods" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 6 --\x3e\n<section data-name="6">\n<a name="5"></a><h3>6. Что делаем метод Array.splice()?</h3>\n<p>Метод splice() используется для добавления или удаления элементов в или из массива. Первый аргумент определяет начальную позицию для добавления или удаления элементов, второй опциональный аргумент - количество удаляемых элементов. Каждый последующий аргумент добавляется в массив:</p>\n<pre><code>\n<span class="code keyword">let</span> arrayOriginal1 <span class="code operator">=</span> <span class="code punctuation">[</span><span class="code number">1</span><span class="code punctuation">,</span> <span class="code number">2</span><span class="code punctuation">,</span> <span class="code number">3</span><span class="code punctuation">,</span> <span class="code number">4</span><span class="code punctuation">,</span> <span class="code number">5</span><span class="code punctuation">]</span>\n<span class="code keyword">let</span> arrayOriginal2 <span class="code operator">=</span> <span class="code punctuation">[</span><span class="code number">1</span><span class="code punctuation">,</span> <span class="code number">2</span><span class="code punctuation">,</span> <span class="code number">3</span><span class="code punctuation">,</span> <span class="code number">4</span><span class="code punctuation">,</span> <span class="code number">5</span><span class="code punctuation">]</span>\n<span class="code keyword">let</span> arrayOriginal3 <span class="code operator">=</span> <span class="code punctuation">[</span><span class="code number">1</span><span class="code punctuation">,</span> <span class="code number">2</span><span class="code punctuation">,</span> <span class="code number">3</span><span class="code punctuation">,</span> <span class="code number">4</span><span class="code punctuation">,</span> <span class="code number">5</span><span class="code punctuation">]</span>\n\n<span class="code keyword">let</span> array1 <span class="code operator">=</span> arrayOriginal1<span class="code punctuation">.</span><span class="code function">splice</span><span class="code punctuation">(</span><span class="code number">0</span><span class="code punctuation">,</span> <span class="code number">2</span><span class="code punctuation">)</span> <span class="code comment">// возвращается [1, 2]; исходный массив = [3, 4, 5]</span>\n<span class="code keyword">let</span> array2 <span class="code operator">=</span> arrayOriginal2<span class="code punctuation">.</span><span class="code function">slice</span><span class="code punctuation">(</span><span class="code number">3</span><span class="code punctuation">)</span> <span class="code comment">// возвращается [4, 5]; исходный массив = [1, 2, 3]</span>\n<span class="code keyword">let</span> array3 <span class="code operator">=</span> arrayOriginal3<span class="code punctuation">.</span><span class="code function">slice</span><span class="code punctuation">(</span><span class="code number">3</span><span class="code punctuation">,</span> <span class="code number">1</span><span class="code punctuation">,</span> <span class="code string">\'a\'</span><span class="code punctuation">,</span> <span class="code string">\'b\'</span><span class="code punctuation">,</span> <span class="code string">\'c\'</span><span class="code punctuation">)</span> <span class="code comment">// возвращается [4]; исходный массив = [1, 2, 3, \'a\', \'b\', \'c\']</span>\n</code></pre>\n<p>Обратите внимание, что метод splice() модифицирует исходный массив и возвращает массив извлеченных элементов.</p>\n<nav>\n<a href="https://learn.javascript.ru/array-methods" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 7 --\x3e\n<section data-name="7">\n<a name="6"></a><h3>7. В чем разница между slice() и splice()?</h3>\n<p>Главные отличия состоят в следующем:</p>\n<table>\n<tbody><tr>\n<th>Slice</th>\n<th>Splice</th>\n</tr>\n<tr>\n<td>Не изменяет исходный массив</td>\n<td>Изменяет исходный массив</td>\n</tr>\n<tr>\n<td>Возвращает подмассив исходного массива</td>\n<td>Возвращает удаленные элементы в виде массива</td>\n</tr>\n<tr>\n<td>Служит для извлечения элементов из массива</td>\n<td>Служит для добавления/удаления элементов в/из массива</td>\n</tr>\n</tbody></table>\n<nav>\n<a href="https://learn.javascript.ru/array-methods" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank">MDN - Slice</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank">MDN - Splice</a>\n</nav>\n</section>\n\n\x3c!-- 8 --\x3e\n<section data-name="8">\n<a name="7"></a><h3>8. Как сравниваются объекты (objects) и карты (maps)?</h3>\n<p>Объекты похожи на карты в том, что оба позволяют устанавливать ключи для значений, извлекать значения, удалять ключи и определять наличие значения по ключу. По этой причине объекты раньше использовались как карты. Однако между ними существуют некоторые отличия, которые делают использование карт более предпочтительным в определенных случаях.</p>\n<ul>\n<li>Ключами объекта могут быть только строки и символы, а ключами карты - любые значения, включая функции и объекты</li>\n<li>Ключи карты упорядочены, а ключи объекта нет. Поэтому при итерации ключи карты возвращаются в порядке их добавления</li>\n<li>Вы можете получить размер карты с помощью свойства size, а количество свойств объекта определяется вручную</li>\n<li>Карта является итерируемой сущностью, т.е. перебираемой по умолчанию, а для итерации по объекту необходимо сначала каким-то образом получить его ключи, а затем их перебрать</li>\n<li>При использовании объекта в качестве карты следует помнить о том, что любой объект имеет прототип, поэтому собственные ключи такой карты могут пересекаться с вашими ключами. Поэтому для создания карты-объекта следует использовать Object.create(null), но сейчас такой способ используется крайне редко</li>\n<li>Объект уступает карте в плане производительности, когда речь идет о быстром добавлении/удалении ключей</li>\n</ul>\n<nav>\n<a href="https://learn.javascript.ru/map-set" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 9 --\x3e\n<section data-name="9">\n<a name="8"></a><h3>9. В чем разница между операторами "==" и "==="?</h3>\n<p>JavaScript предоставляет два способа для сравнения значений: строгое (===, !==) и абстрактное (==, !==). При строгом сравнении значения сравниваются как есть, а при нестрогом при необходимости осуществляется неявное преобразование (приведение) типов значений. Строгие операторы используют следующие правила для сравнения различных типов значений:</p>\n<ul>\n<li>Две строки являются строго равными, когда они имеют одинаковый набор символов, одинаковую длину и одинаковые символы на одних и тех же позициях</li>\n<li>\nДва числа являются строго равными, если равны их значения. Существует два особых случая:\n<ul>\n<li>NaN не равно ничему, включая NaN</li>\n<li>Положительный и отрицательный нули равны друг другу</li>\n</ul>\n</li>\n</ul>\n<li>Логические значение являются строго равными, когда оба являются истинными или ложными, т.е. true или false</li>\n<li>Два объекта являются строго равными, если ссылаются на один и тот же объект (место в памяти)</li>\n<li>null === undefined возвращает false, но null == undefined возвращает true</li>\n<p>Несколько примеров:</p>\n<pre><code>\n<span class="code number">0</span> <span class="code operator">==</span> <span class="code boolean">false</span> <span class="code comment">// true</span>\n<span class="code number">0</span> <span class="code operator">===</span> <span class="code boolean">false</span> <span class="code comment">// false</span>\n<span class="code number">1</span> <span class="code operator">==</span> <span class="code string">"1"</span> <span class="code comment">// true</span>\n<span class="code number">1</span> <span class="code operator">===</span> <span class="code string">"1"</span> <span class="code comment">// false</span>\n<span class="code keyword">null</span> <span class="code operator">==</span> <span class="code keyword">undefined</span> <span class="code comment">// true</span>\n<span class="code keyword">null</span> <span class="code operator">===</span> <span class="code keyword">undefined</span> <span class="code comment">// false</span>\n<span class="code string">\'0\'</span> <span class="code operator">==</span> <span class="code boolean">false</span> <span class="code comment">// true</span>\n<span class="code string">\'0\'</span> <span class="code operator">===</span> <span class="code boolean">false</span> <span class="code comment">// false</span>\n<span class="code punctuation">[</span><span class="code punctuation">]</span> <span class="code operator">==</span> <span class="code punctuation">[</span><span class="code punctuation">]</span> <span class="code comment">// или</span>\n<span class="code punctuation">[</span><span class="code punctuation">]</span> <span class="code operator">===</span> <span class="code punctuation">[</span><span class="code punctuation">]</span> <span class="code comment">// false, ссылаются на разные места в памяти</span>\n<span class="code punctuation">{</span><span class="code punctuation">}</span> <span class="code operator">==</span> <span class="code punctuation">{</span><span class="code punctuation">}</span> <span class="code comment">// или</span>\n<span class="code punctuation">{</span><span class="code punctuation">}</span> <span class="code operator">===</span> <span class="code punctuation">{</span><span class="code punctuation">}</span> <span class="code comment">// false, ссылаются на разные места в памяти</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/comparison" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/%D0%9E%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D1%8B_%D1%81%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 10 --\x3e\n<section data-name="10">\n<a name="9"></a><h3>10. Что такое лямбда- или стрелочные функции?</h3>\n<p>Стрелочные функции - это сокращенный способ записи функциональных выражений. Они не имеют собственных this, arguments, super и new.target. Эти функции служат хорошей альтернативой функциям, не имеющим методов, но не могут использоваться как конструкторы.</p>\n<nav>\n<a href="https://learn.javascript.ru/arrow-functions-basics" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 11 --\x3e\n<section data-name="11">\n<a name="10"></a><h3>11. Почему функции называют объектами первого класса?</h3>\n<p>В JavaScript функции являются объектами первого класса. Это означает, что функции могут использоваться как обычные переменные.</p>\n<p>Например, функция может передаваться в качестве аргумента другой функции, возвращаться как значение из другой функции и присваиваться переменной. В следующем примере функция присваиваивается обработчику:</p>\n<pre><code>\n<span class="code keyword">const</span> <span class="code function-variable function">handler</span> <span class="code operator">=</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code string">\'Это функция обработки клика\'</span><span class="code punctuation">)</span>\ndocument<span class="code punctuation">.</span><span class="code function">addEventListener</span><span class="code punctuation">(</span><span class="code string">\'click\'</span><span class="code punctuation">,</span> handler<span class="code punctuation">)</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/function-basics" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/First-class_Function" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 12 --\x3e\n<section data-name="12">\n<a name="11"></a><h3>12. Что такое функция первого порядка?</h3>\n<p>Функция первого порядка - это функция, которая не принимает другую функцию в качестве аргумента и не возвращает функцию как значение:</p>\n<pre><code>\n<span class="code keyword">const</span> <span class="code function-variable function">firstOrder</span> <span class="code operator">=</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code string">\'Я - функция первого порядка\'</span><span class="code punctuation">)</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/function-basics" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 13 --\x3e\n<section data-name="13">\n<a name="12"></a><h3>13. Что такое функция высшего порядка?</h3>\n<p>Функция высшего порядка - это функция, которая принимает другую функцию в качестве аргумента или возращает другую функцию как значение:</p>\n<pre><code>\n<span class="code keyword">const</span> <span class="code function-variable function">firstOrderFunc</span> <span class="code operator">=</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code string">\'Я - функция первого порядка\'</span><span class="code punctuation">)</span>\n<span class="code keyword">const</span> <span class="code function-variable function">higherOrder</span> <span class="code operator">=</span> <span class="code parameter">returnFirstOrderFunc</span> <span class="code operator">=&gt;</span> <span class="code function">returnFirstOrderFunc</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\n<span class="code function">higherOrder</span><span class="code punctuation">(</span>firstOrderFunc<span class="code punctuation">)</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/function-basics" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 14 --\x3e\n<section data-name="14">\n<a name="13"></a><h3>14. Что такое унарная функция?</h3>\n<p>Унарная функция (функция-монада) - это функция, принимающая только один аргумент:</p>\n<pre><code>\n<span class="code keyword">const</span> <span class="code function-variable function">unaryFunction</span> <span class="code operator">=</span> <span class="code parameter">a</span> <span class="code operator">=&gt;</span> console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>a <span class="code operator">+</span> <span class="code number">10</span><span class="code punctuation">)</span> <span class="code comment">// прибавляем 10 к переданному аргументу и выводим результат в консоль</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/function-basics" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 15 --\x3e\n<section data-name="15">\n<a name="14"></a><h3>15. Что такое каррирование (currying)?</h3>\n<p>Каррирование - это процесс преобразования функции с несколькими параметрами в несколько функций с одним параметром. Данный процесс назван в четь математика Хаскелла Карри. Каррирование превращает одну n-арную функцию в несколько унарных функций (уменьшает арность функции):</p>\n<pre><code>\n<span class="code keyword">const</span> <span class="code function-variable function">multiArgF</span> <span class="code operator">=</span> <span class="code punctuation">(</span><span class="code parameter">a<span class="code punctuation">,</span> b<span class="code punctuation">,</span> c</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> a <span class="code operator">+</span> b <span class="code operator">+</span> c\n<span class="code keyword">const</span> <span class="code function-variable function">curryUnaryF</span> <span class="code operator">=</span> <span class="code parameter">a</span> <span class="code operator">=&gt;</span> <span class="code parameter">b</span> <span class="code operator">=&gt;</span> <span class="code parameter">c</span> <span class="code operator">=&gt;</span> a <span class="code operator">+</span> b <span class="code operator">+</span> c\n<span class="code function">curryUnaryF</span><span class="code punctuation">(</span><span class="code number">1</span><span class="code punctuation">)</span> <span class="code comment">// возвращает функцию: b =&gt; c =&gt; 1 + b + c</span>\n<span class="code function">curryUnaryF</span><span class="code punctuation">(</span><span class="code number">1</span><span class="code punctuation">)</span><span class="code punctuation">(</span><span class="code number">2</span><span class="code punctuation">)</span> <span class="code comment">// возвращает функцию: c =&gt; 3 + c</span>\n<span class="code function">curryUnaryF</span><span class="code punctuation">(</span><span class="code number">1</span><span class="code punctuation">)</span><span class="code punctuation">(</span><span class="code number">2</span><span class="code punctuation">)</span><span class="code punctuation">(</span><span class="code number">3</span><span class="code punctuation">)</span> <span class="code comment">// возвращает число 6</span>\n</code></pre>\n<p>Каррирование применяется в целях обеспечения возможности повторного использования кода и создания композиции из функций.</p>\n<nav>\n<a href="https://learn.javascript.ru/currying-partials" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 16 --\x3e\n<section data-name="16">\n<a name="15"></a><h3>16. Что такое чистая функция?</h3>\n<p>Чистая функция - это функция, возвращаемое значение которой зависит только от передаваемых аргументов, без побочных эффектов. Проще говоря, если вы вызывается функцию n раз с n аргументами, и функция всегда возвращает одно и тоже значение, значит, она является чистой:</p>\n<pre><code>\n<span class="code comment">// не чистая</span>\n<span class="code keyword">let</span> numberArray <span class="code operator">=</span> <span class="code punctuation">[</span><span class="code punctuation">]</span>\n<span class="code keyword">const</span> <span class="code function-variable function">impureAddNumber</span> <span class="code operator">=</span> <span class="code parameter">number</span> <span class="code operator">=&gt;</span> numberArray<span class="code punctuation">.</span><span class="code function">push</span><span class="code punctuation">(</span>number<span class="code punctuation">)</span>\n<span class="code comment">// чистая</span>\n<span class="code keyword">const</span> <span class="code function-variable function">pureAddNumber</span> <span class="code operator">=</span> <span class="code parameter">number</span> <span class="code operator">=&gt;</span> <span class="code parameter">argNumberArray</span> <span class="code operator">=&gt;</span> argNumberArray<span class="code punctuation">.</span><span class="code function">concat</span><span class="code punctuation">(</span><span class="code punctuation">[</span>number<span class="code punctuation">]</span><span class="code punctuation">)</span>\n\n<span class="code comment">// отображаем результаты</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code function">impureAddNumber</span><span class="code punctuation">(</span><span class="code number">6</span><span class="code punctuation">)</span><span class="code punctuation">)</span> <span class="code comment">// 1</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>numberArray<span class="code punctuation">)</span> <span class="code comment">// [6]</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code function">pureAddNumber</span><span class="code punctuation">(</span><span class="code number">7</span><span class="code punctuation">)</span><span class="code punctuation">(</span>numberArray<span class="code punctuation">)</span><span class="code punctuation">)</span> <span class="code comment">// [6, 7]</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>numberArray<span class="code punctuation">)</span> <span class="code comment">// [6]</span>\n</code></pre>\n<p>В приведенном примере impureAddNumber не является чистой функцией, поскольку метод push() возвращает новую длину массива, которая не зависит от передаваемого аргумента. Вторая функция является чистой, поскольку метод concat() объединяет два массива без побочных эффектов и возвращает новый массив. Чистые функции важны для юнит-тестирования и не нуждаются во внедрении зависимостей. Отсутствие побочных эффектов повышает надежность приложения за счет более слабых связей между его элементами. Одним из воплощений данного принципа является концепция неизменности (иммутабельности), представленная в ES6, и заключающаяся в предпочтении const перед let.</p>\n<nav>\n<a href="https://learn.javascript.ru/function-basics" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 17 --\x3e\n<section data-name="17">\n<a name="16"></a><h3>17. Для чего используется ключевое слово "let"?</h3>\n<p>Ключевое слово "let" служит для объявления локальной переменной, имеющей блочную область видимости. Область видимости такой переменной органичена блоком, оператором или выражением, в котором она используется. Переменные, объявленные с помощью ключевого слова "var", имеют глобальную область видимости или область видимости функции, в которой они определены:</p>\n<pre><code>\n<span class="code keyword">let</span> counter <span class="code operator">=</span> <span class="code number">30</span>\n<span class="code keyword">if</span> <span class="code punctuation">(</span>counter <span class="code operator">===</span> <span class="code number">30</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n<span class="code keyword">let</span> counter <span class="code operator">=</span> <span class="code number">31</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>counter<span class="code punctuation">)</span> <span class="code comment">// 31</span>\n<span class="code punctuation">}</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>counter<span class="code punctuation">)</span> <span class="code comment">// 30 (переменная counter, объявленная в блоке, здесь не существует)</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/variables" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/let" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 18 --\x3e\n<section data-name="18">\n<a name="17"></a><h3>18. В чем разница между let и var?</h3>\n<p>Основные отличия состоят в следующем:</p>\n<table>\n<tbody><tr>\n<th>var</th>\n<th>let</th>\n</tr>\n<tr>\n<td>Доступно с момента появления JavaScript</td>\n<td>Представлено в ES6</td>\n</tr>\n<tr>\n<td>Имеет глобальную или функциональную область видимости</td>\n<td>Имеет блочную область видимости</td>\n</tr>\n<tr>\n<td>Переменные поднимаются в начало области видимости</td>\n<td>Переменные также поднимаются, но не инициализируются (поднимается только объявление, но не присвоение значения)</td>\n</tr>\n</tbody></table>\n<p>Несколько примеров:</p>\n<pre><code>\n<span class="code keyword">function</span> <span class="code function">userDetails</span><span class="code punctuation">(</span><span class="code parameter">username</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code keyword">if</span> <span class="code punctuation">(</span>username<span class="code punctuation">)</span> <span class="code punctuation">{</span>\n        console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>salary<span class="code punctuation">)</span>\n        console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>age<span class="code punctuation">)</span>\n        <span class="code keyword">let</span> age <span class="code operator">=</span> <span class="code number">30</span>\n        <span class="code keyword">var</span> salary <span class="code operator">=</span> <span class="code number">10000</span>\n    <span class="code punctuation">}</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>salary<span class="code punctuation">)</span> <span class="code comment">// 10000 (область видимости функции)</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>age<span class="code punctuation">)</span> <span class="code comment">// ошибка: age не определена (блочная область видимости)</span>\n<span class="code punctuation">}</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/variables" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/let" target="_blank">MDN - let</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/var" target="_blank">MDN - var</a>\n</nav>\n</section>\n\n\x3c!-- 19 --\x3e\n<section data-name="19">\n<a name="18"></a><h3>19. Почему в качестве ключевого слова было выбрано слово "let"?</h3>\n<p>Let (пусть) - это математический оператор, который использовался ранними языками программирования, такими как Scheme и Basic. В настоящее время let используется большим количеством языков программирования, так что данное слово является наиболее близкой альтернативой сокращению "var" (variable - переменная).</p>\n<nav>\n<a href="https://learn.javascript.ru/variables" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/let" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 20 --\x3e\n<section data-name="20">\n<a name="19"></a><h3>20. Как переопределить переменную в блоке switch?</h3>\n<p>Если вы попытаетесь переопределить переменную, объявленную с помощью ключевого слова "let" в блоке switch, то получите ошибку:</p>\n<pre><code>\n<span class="code keyword">let</span> counter <span class="code operator">=</span> <span class="code number">1</span>\n<span class="code keyword">switch</span><span class="code punctuation">(</span>x<span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code keyword">case</span> <span class="code number">0</span><span class="code operator">:</span>\n        <span class="code keyword">let</span> name\n        <span class="code keyword">break</span>\n    <span class="code keyword">case</span> <span class="code number">1</span><span class="code operator">:</span>\n        <span class="code keyword">let</span> name <span class="code comment">// синтаксическая ошибка (SyntaxError)</span>\n        <span class="code keyword">break</span>\n<span class="code punctuation">}</span>\n</code></pre>\n<p>Для решения данной задачи необходимо создать новый блок внутри case - новую лексическую область видимости:</p>\n<pre><code>\n<span class="code keyword">let</span> counter <span class="code operator">=</span> <span class="code number">1</span>\n<span class="code keyword">switch</span><span class="code punctuation">(</span>x<span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code keyword">case</span> <span class="code number">0</span><span class="code operator">:</span> <span class="code punctuation">{</span>\n        <span class="code keyword">let</span> name\n        <span class="code keyword">break</span>\n    <span class="code punctuation">}</span>\n    <span class="code keyword">case</span> <span class="code number">1</span><span class="code operator">:</span> <span class="code punctuation">{</span>\n        <span class="code keyword">let</span> name\n        <span class="code keyword">break</span>\n    <span class="code punctuation">}</span>\n<span class="code punctuation">}</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/switch" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/switch" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 21 --\x3e\n<section data-name="21">\n<a name="20"></a><h3>21. Что такое временная мертвая зона?</h3>\n<p>При попытке доступа к переменным, объявленным с помощью ключевого слова "let" или "const" (но не "var"), до их определения (т.е. до присваивания им значения внутри текущей области видимости) будет выброшено исключение ReferenceError (ошибка ссылки). Другими словами, временной метрвой зоной называется время между созданием контекста (области видимости) переменной и ее определением:</p>\n<pre><code>\n<span class="code keyword">function</span> <span class="code function">someMethod</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>counter1<span class="code punctuation">)</span> <span class="code comment">// undefined</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>counter2<span class="code punctuation">)</span> <span class="code comment">// ReferenceError</span>\n    <span class="code keyword">var</span> counter1 <span class="code operator">=</span> <span class="code number">1</span>\n    <span class="code keyword">const</span> counter2 <span class="code operator">=</span> <span class="code number">2</span>\n<span class="code punctuation">}</span>\n</code></pre>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/let" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 22 --\x3e\n<section data-name="22">\n<a name="21"></a><h3>22. Что такое немедленно вызываемое функциональное выражение (IIFE, Immediately Invoked Function Expression)?</h3>\n<p>IIFE - это функция, которая вызывается сразу после определения. Синтаксис такой функции может выглядеть так (один из вариантов, наиболее распространенный):</p>\n<pre><code>\n<span class="code punctuation">(</span><span class="code keyword">function</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code comment">// код</span>\n<span class="code punctuation">}</span><span class="code punctuation">)</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\n\n<span class="code comment">// или, если речь идет о стрелочной функции</span>\n<span class="code punctuation">(</span><span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n    <span class="code comment">// код</span>\n<span class="code punctuation">}</span><span class="code punctuation">)</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\n</code></pre>\n<p>Главная причина использования IIFE заключается в обеспечении приватности переменных, поскольку доступ к переменным, объявленным внутри IIFE, нельзя получить из внешнего окружения:</p>\n<pre><code>\n<span class="code punctuation">(</span><span class="code keyword">function</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code keyword">var</span> message <span class="code operator">=</span> <span class="code string">\'IIFE\'</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>message<span class="code punctuation">)</span>\n<span class="code punctuation">}</span><span class="code punctuation">)</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>message<span class="code punctuation">)</span> <span class="code comment">// ошибка: message не определена</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/closure#bloki-koda-i-tsikly-iife" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/IIFE" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 23 --\x3e\n<section data-name="23">\n<a name="22"></a><h3>23. В чем заключаются преимущества использования модулей?</h3>\n<p>Среди прочего, можно назвать следующее:</p>\n<ul>\n<li>Повышение читаемости и облегчение поддержки кода</li>\n<li>Возможность повторного использования кода</li>\n<li>Сохранение чистоты глобального пространства имен</li>\n</ul>\n<nav>\n<a href="https://learn.javascript.ru/modules-intro" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Modules" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 24 --\x3e\n<section data-name="24">\n<a name="23"></a><h3>24. Что такое запоминание или мемоизация?</h3>\n<p>Мемоизация - это способ повышения производительности функции за счет сохранения в кэше ранее полученных результатов выполнения этой функции. При каждом вызове функции переданный ей аргумент становится индексом кэша. Если данные имеются в кэше, они возвращаются без повторного выполнения функции. В противном случае, функция выполняется, а результат записывается в кэш:</p>\n<pre><code>\n<span class="code keyword">const</span> <span class="code function-variable function">memoizAddition</span> <span class="code operator">=</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n    <span class="code keyword">let</span> cache <span class="code operator">=</span> <span class="code punctuation">{</span><span class="code punctuation">}</span>\n    <span class="code keyword">return</span> <span class="code parameter">value</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n        <span class="code keyword">if</span> <span class="code punctuation">(</span>value <span class="code keyword">in</span> cache<span class="code punctuation">)</span> <span class="code punctuation">{</span>\n            console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code string">\'Получение данных из кэша\'</span><span class="code punctuation">)</span>\n            <span class="code keyword">return</span> cache<span class="code punctuation">[</span>value<span class="code punctuation">]</span> <span class="code comment">// в данном случае, cache.value не может быть использовано в качестве названия свойства, поскольку названия свойств в JS не могут начинаться с числа. Поэтому используется скобочная нотация</span>\n        <span class="code punctuation">}</span> <span class="code keyword">else</span> <span class="code punctuation">{</span>\n            console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code string">\'Результат вычисляется\'</span><span class="code punctuation">)</span>\n            <span class="code keyword">let</span> result <span class="code operator">=</span> value <span class="code operator">+</span> <span class="code number">20</span>\n            cache<span class="code punctuation">[</span>value<span class="code punctuation">]</span> <span class="code operator">=</span> result\n            <span class="code keyword">return</span> result\n        <span class="code punctuation">}</span>\n    <span class="code punctuation">}</span>\n<span class="code punctuation">}</span>\n<span class="code comment">// возвращаем функцию из memoizAddition</span>\n<span class="code keyword">const</span> addition <span class="code operator">=</span> <span class="code function">memoizAddition</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code function">addition</span><span class="code punctuation">(</span><span class="code number">20</span><span class="code punctuation">)</span><span class="code punctuation">)</span> <span class="code comment">// Результат вычисляется 40</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code function">addition</span><span class="code punctuation">(</span><span class="code number">20</span><span class="code punctuation">)</span><span class="code punctuation">)</span> <span class="code comment">// Получения данных из кэша 40</span>\n</code></pre>\n\n</section>\n\n\x3c!-- 25 --\x3e\n<section data-name="25">\n<a name="24"></a><h3>25. Что такое поднятие переменных (hoisting)?</h3>\n<p>Поднятие - это процесс перемещения переменных и функциональных выражений в начало их области видимости перед выполнением кода. Запомните: поднимаются только сами переменные и выражения, а не их инициализация (т.е. поднимается объявление переменной, а не присваивание ей значения):</p>\n<pre><code>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>message<span class="code punctuation">)</span> <span class="code comment">// undefined</span>\n<span class="code keyword">var</span> message <span class="code operator">=</span> <span class="code string">\'Хойстинг\'</span>\n</code></pre>\n<p>Для компилятора данный код выглядит так:</p>\n<pre><code>\n<span class="code keyword">var</span> message\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>message<span class="code punctuation">)</span>\nmessage <span class="code operator">=</span> <span class="code string">\'Хойстинг\'</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/var" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/%D0%9F%D0%BE%D0%B4%D0%BD%D1%8F%D1%82%D0%B8%D0%B5" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 26 --\x3e\n<section data-name="26">\n<a name="25"></a><h3>26. Что такое класс?</h3>\n<p>Классы, представленные в ES6, являются синтаксическим сахаром (оберткой, абстракцией или надстройкой) для протипного наследования (для прототипа функции-конструктора). Пример функции-конструктора:</p>\n<pre><code>\n<span class="code keyword">function</span> <span class="code function">Bike</span><span class="code punctuation">(</span><span class="code parameter">model<span class="code punctuation">,</span> color</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code keyword">this</span><span class="code punctuation">.</span>model <span class="code operator">=</span> model\n    <span class="code keyword">this</span><span class="code punctuation">.</span>color <span class="code operator">=</span> color\n<span class="code punctuation">}</span>\n\n<span class="code class-name">Bike</span><span class="code punctuation">.</span>prototype<span class="code punctuation">.</span><span class="code function-variable function">getDetails</span> <span class="code operator">=</span> <span class="code keyword">function</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code keyword">return</span> <span class="code string">\'Эта \'</span> <span class="code operator">+</span> <span class="code keyword">this</span><span class="code punctuation">.</span>model <span class="code operator">+</span> <span class="code string">\' велосипеда имеет \'</span> <span class="code operator">+</span> <span class="code keyword">this</span><span class="code punctuation">.</span>color <span class="code operator">+</span> <span class="code string">\' цвет.\'</span>\n<span class="code punctuation">}</span>\n</code></pre>\n<p>Тот же пример с использованием класса:</p>\n<pre><code>\n<span class="code keyword">class</span> <span class="code class-name">Bike</span> <span class="code punctuation">{</span>\n    <span class="code function">constructor</span> <span class="code punctuation">(</span><span class="code parameter">color<span class="code punctuation">,</span> model</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n        <span class="code keyword">this</span><span class="code punctuation">.</span>color <span class="code operator">=</span> color\n        <span class="code keyword">this</span><span class="code punctuation">.</span>model <span class="code operator">=</span> model\n    <span class="code punctuation">}</span>\n\n    <span class="code function">getDetails</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n        <span class="code keyword">return</span> <span class="code template-string"><span class="code template-punctuation string">`</span><span class="code string">Эта </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span><span class="code keyword">this</span><span class="code punctuation">.</span>model<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string"> велосипеда имеет </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span><span class="code keyword">this</span><span class="code punctuation">.</span>color<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string"> цвет.</span><span class="code template-punctuation string">`</span></span>\n    <span class="code punctuation">}</span>\n<span class="code punctuation">}</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/class" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Classes" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 27 --\x3e\n<section data-name="27">\n<a name="26"></a><h3>27. Что такое замыкание?</h3>\n<p>Замыкание - это комбинация функции и ее лексического окружения. Проще говоря, замыкание - это когда внутренняя функция имеет доступ к переменным, объявленным во внешней функции. Замыкание имеет цепочку из трех областей видимости:</p>\n<ul>\n<li>Собственная область видимости</li>\n<li>Область видимости внешней функции</li>\n<li>Глобальная область видимости</li>\n</ul>\n<pre><code>\n<span class="code keyword">function</span> <span class="code function">Welcome</span> <span class="code punctuation">(</span><span class="code parameter">name</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code keyword">var</span> <span class="code function-variable function">greetingInfo</span> <span class="code operator">=</span> <span class="code keyword">function</span> <span class="code punctuation">(</span><span class="code parameter">message</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n        console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>message <span class="code operator">+</span> <span class="code string">\' \'</span> <span class="code operator">+</span> name<span class="code punctuation">)</span>\n    <span class="code punctuation">}</span>\n    <span class="code keyword">return</span> greetingInfo\n<span class="code punctuation">}</span>\n\n<span class="code keyword">var</span> myFunction <span class="code operator">=</span> <span class="code function">Welcome</span><span class="code punctuation">(</span><span class="code string">\'Иван\'</span><span class="code punctuation">)</span>\n<span class="code function">myFunction</span><span class="code punctuation">(</span><span class="code string">\'Добро пожаловать, \'</span><span class="code punctuation">)</span> <span class="code comment">// Добро пожаловать, Иван</span>\n<span class="code function">myFunction</span><span class="code punctuation">(</span><span class="code string">\'Привет, \'</span><span class="code punctuation">)</span> <span class="code comment">// Привет, Иван</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/closure" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Closures" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 28 --\x3e\n<section data-name="28">\n<a name="27"></a><h3>28. Что такое модуль?</h3>\n<p>Модули - это небольшие части независимого переиспользуемого кода, лежащие в основе многих шаблонов проектирования. Большинство модулей экспортируется в качестве объектов, функций или конструкторов.</p>\n<nav>\n<a href="https://learn.javascript.ru/modules-intro" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Modules" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 29 --\x3e\n<section data-name="29">\n<a name="28"></a><h3>29. Зачем нужны модули?</h3>\n<p>Среди прочего, можно назвать следующее:</p>\n<ul>\n<li>Повышение читаемости и облегчение поддержки кода</li>\n<li>Возможность повторного использования кода</li>\n<li>Сохранение чистоты глобального пространства имен</li>\n</ul>\n<nav>\n<a href="https://learn.javascript.ru/modules-intro" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Modules" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 30 --\x3e\n<section data-name="30">\n<a name="29"></a><h3>30. Что такое область видимости?</h3>\n<p>Область видимости определяет доступность переменных, функций и объектов в разных местах кода во время его выполнения. Другими словами, область видимости - это видимость переменных и других ресурсов в текущем контексте выполнения кода.</p>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Glossary/Scope" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 31 --\x3e\n<section data-name="31">\n<a name="30"></a><h3>31. Что такое сервис-воркер (service worker)?</h3>\n<p>Сервис-воркер - это скрипт, который выполняется независимо от веб-страницы, на которой он был запущен, и действий пользователя. Фактически сервис-воркер выполняет роль прокси-сервера между приложением и браузером. Основными возможностями сервис-воркеров является следующее: обеспечение работы приложения в режиме офлайн, периодическая фоновая синхронизация, пуш-уведомления, перехват и обработка сетевых запросов и программное управление кэшем.</p>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/ServiceWorker" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 32 --\x3e\n<section data-name="32">\n<a name="31"></a><h3>32. Как взаимодействовать с объектной моделью документа (Document Object Model, DOM) с помощью сервис-воркеров?</h3>\n<p>Сервис-воркеры не имеют прямого доступа к DOM. Однако, они могут взаимодействовать со страницей через интерфейс postMessage, а страница - может изменять DOM.</p>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/ServiceWorker" target="_blank">MDN - ServiceWorker</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Client/postMessage" target="_blank">MDN - postMessage</a>\n</nav>\n</section>\n\n\x3c!-- 33 --\x3e\n<section data-name="33">\n<a name="32"></a><h3>33. Как повторно использовать информацию при перезапуске сервис-воркера?</h3>\n<p>Одной из проблем сервис-воркеров является то, что их выполнение прекращается, когда они не используются, и повторно запускается при необходимости. Это не позволяет добавлять обработчики событий fetch и message глобально. Для повторного использования информации необходимо обеспечить взаимодействие сервис-воркеров с индексированной базой данных (IndexedDB) или локальным хранилищем (local storage).</p>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/ServiceWorker" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 34 --\x3e\n<section data-name="34">\n<a name="33"></a><h3>34. Что такое индексированная база данных (IndexedDB)?</h3>\n<p>IndexedDB - это низкоуровневый прикладной интерфейс для хранения большого объема структурированных данных, включая файлы и blobs, на стороне клиента. Данный интерфейс использует индексы для высокопроизводительного поиска данных.</p>\n<nav>\n<a href="https://learn.javascript.ru/indexeddb" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/IndexedDB_API" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 35 --\x3e\n<section data-name="35">\n<a name="34"></a><h3>35. Что такое веб-хранилище (Web Storage)?</h3>\n<p>Веб-хранилище - это интерфейс, позволяющий хранить данные в виде пар ключ/значение локально, т.е. в браузере пользователя, более удобным способом, чем при использовании куки. Веб-хранилище предоставляет два механизма хранения данных:</p>\n<ul>\n<li>Локальное хранилище (local stotage) - хранит данные текущего пользователя неограниченное количество времени</li>\n<li>Сессионное хранилище (session storage) - хранит данные на протяжении текущей сессии, т.е. при закрытии вкладки браузера данные будут потеряны</li>\n</ul>\n<nav>\n<a href="https://learn.javascript.ru/localstorage" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Web_Storage_API" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 36 --\x3e\n<section data-name="36">\n<a name="35"></a><h3>36. Что такое postMessage?</h3>\n<p>postMessage - это способ коммуникации разных источников объекта window (например, страницы и генерируемого ею поп-апа (всплывающего окна) или страницы и встроенного в нее iframe). Обычно, скрипты одной страницы не имеют доступа к другой странице, если данная страница следует политике общего происхождения или, как еще говорят, одного источника (источники должны иметь одинаковый протокол, хост и порт).</p>\n</section>\n\n\x3c!-- 37 --\x3e\n<section data-name="37">\n<a name="36"></a><h3>37. Что такое куки (cookie)?</h3>\n<p>Куки - это небольшой фрагмент данных, который сохраняется на компьютере пользователя для последующего использования браузером. Куки сохраняются в виде пар ключ/значение:</p>\n<pre><code>\ndocument<span class="code punctuation">.</span>cookie <span class="code operator">=</span> <span class="code string">\'username=John\'</span>\n</code></pre>\n<img src="img/2.png" alt="2">\n<nav>\n<a href="https://learn.javascript.ru/cookie" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Document/cookie" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 38 --\x3e\n<section data-name="38">\n<a name="37"></a><h3>38. Зачем нужны куки?</h3>\n<p>Куки используются для сохранения информации о пользователе (не рекомендуется использовать для хранения конфиденциальной информации). Обычно, данный процесс состоит из двух этапов:</p>\n<ul>\n<li>При первом посещении страницы профиль пользователя сохраняется в куки</li>\n<li>При повторном посещении страницы профиль пользователя извлекается из куки</li>\n</ul>\n<nav>\n<a href="https://learn.javascript.ru/cookie" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Document/cookie" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 39 --\x3e\n<section data-name="39">\n<a name="38"></a><h3>39. Какими возможностями обладают куки?</h3>\n<p>По умолчанию, куки удаляются при закрытии браузера, однако это можно изменить, установив время жизни (expires) (в формате UTC):</p>\n<pre><code>\ndocument<span class="code punctuation">.</span>cookie <span class="code operator">=</span> <span class="code string">\'username=John; expires=Sat, 5 Sep 2020 12:00:00 UTC\'</span>\n</code></pre>\n<p>По умолчанию, куки принадлежат текущей странице, однако это также можно изменить, установив путь (path):</p>\n<pre><code>\ndocument<span class="code punctuation">.</span>cookie <span class="code operator">=</span> <span class="code string">\'username=John; path=/services\'</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/cookie" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Document/cookie" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 40 --\x3e\n<section data-name="40">\n<a name="39"></a><h3>40. Как удалить куки?</h3>\n<p>Удалить куки можно, установив прошедшее время в качестве времени жизни. В этом случае не нужно определять значение куки:</p>\n<pre><code>\ndocument<span class="code punctuation">.</span>cookie <span class="code operator">=</span> <span class="code string">\'username=; expires=Fri, 05 Jun 2020 00:00:00 UTC; path=/;\'</span>\n</code></pre>\n<p>Обратите внимание, что в данном случае необходимо определить путь для удаления правильного куки. Некоторые браузеры не позволяют удалить куки без указания этого параметра.</p>\n<nav>\n<a href="https://learn.javascript.ru/cookie" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Document/cookie" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 41 --\x3e\n<section data-name="41">\n<a name="40"></a><h3>41. В чем разница между куки, локальным и сессионным хранилищами?</h3>\n<p>Основные отличия состоят в следующем:</p>\n<table>\n<tbody><tr>\n<th>Критерий</th>\n<th>Куки</th>\n<th>Локальное хранилище</th>\n<th>Сессионное хранилище</th>\n</tr>\n<tr>\n<td>Доступность</td>\n<td>Как на сервере, так и на клиенте</td>\n<td>Только на клиенте</td>\n<td>Только на клиенте</td>\n</tr>\n<tr>\n<td>Время жизни</td>\n<td>Устанавливается с помощью expires</td>\n<td>До удаления пользователем</td>\n<td>До закрытия вкладки браузера</td>\n</tr>\n<tr>\n<td>Поддержка шифрования</td>\n<td>Поддерживается</td>\n<td>Не поддерживается</td>\n<td>Не поддерживается</td>\n</tr>\n<tr>\n<td>Максимальный размер данных</td>\n<td>4 Кб</td>\n<td>Около 5 Мб (зависит от браузера)</td>\n<td>Около 5 Мб (зависит от браузера)</td>\n</tr>\n</tbody></table>\n<nav>\n<a href="https://learn.javascript.ru/cookie" target="_blank">JSR - Куки</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Document/cookie" target="_blank">MDN - Cookie</a>\n<a href="https://learn.javascript.ru/localstorage" target="_blank">JSR - LocalStorage, SessionStotage</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Web_Storage_API" target="_blank">MDN - Web Storage</a>\n</nav>\n</section>\n\n\x3c!-- 42 --\x3e\n<section data-name="42">\n<a name="41"></a><h3>42. В чем главное отличие между локальным и сессионным хранилищами?</h3>\n<p>Локальное хранилище - это тоже самое, что и сессионное хранилище, за исключением того, что в первом данные сохраняются даже при закрытии и перезагрузке браузера, а во втором данные удаляются по окончании сессии страницы.</p>\n<nav>\n<a href="https://learn.javascript.ru/localstorage" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Web_Storage_API" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 43 --\x3e\n<section data-name="43">\n<a name="42"></a><h3>43. Как получить доступ к веб-хранилищу?</h3>\n<p>Объект window предоставляет объекты WindowLocalStorage и WindowSessionStorage, которые имеют свойства localStorage и sessionStorage, соответственно. Эти свойства создают экземпляр объекта Storage, с помощью которого можно записывать, извлекать и удалять данные для определенного домена и типа хранилища (сессионное или локальное):</p>\n<pre><code>\n<span class="code comment">// сохраняем данные</span>\nlocalStorage<span class="code punctuation">.</span><span class="code function">setItem</span><span class="code punctuation">(</span><span class="code string">\'data\'</span><span class="code punctuation">,</span> document<span class="code punctuation">.</span><span class="code function">querySelector</span><span class="code punctuation">(</span><span class="code string">\'.data\'</span><span class="code punctuation">)</span><span class="code punctuation">.</span>value<span class="code punctuation">)</span>\n<span class="code comment">// получаем данные</span>\nlocalStorage<span class="code punctuation">.</span><span class="code function">getItem</span><span class="code punctuation">(</span><span class="code string">\'data\'</span><span class="code punctuation">)</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/localstorage" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Web_Storage_API" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 44 --\x3e\n<section data-name="44">\n<a name="43"></a><h3>44. Какие методы предоставляет сессионное хранилище?</h3>\n<p>Сессионное хранилище предоставляет методы для чтения, записи и удаления данных:</p>\n<pre><code>\n<span class="code comment">// записываем данные</span>\nsessionStorage<span class="code punctuation">.</span><span class="code function">setItem</span><span class="code punctuation">(</span><span class="code string">\'key\'</span><span class="code punctuation">,</span> <span class="code string">\'value\'</span><span class="code punctuation">)</span>\n\n<span class="code comment">// получаем данные</span>\n<span class="code keyword">const</span> data <span class="code operator">=</span> sessionStorage<span class="code punctuation">.</span><span class="code function">getItem</span><span class="code punctuation">(</span><span class="code string">\'key\'</span><span class="code punctuation">)</span>\n\n<span class="code comment">// удаляем определенные данные</span>\nsessionStorage<span class="code punctuation">.</span><span class="code function">removeItem</span><span class="code punctuation">(</span><span class="code string">\'key\'</span><span class="code punctuation">)</span>\n\n<span class="code comment">// удаляем все данные</span>\nsessionStorage<span class="code punctuation">.</span><span class="code function">clear</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/localstorage" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Web_Storage_API" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 45 --\x3e\n<section data-name="45">\n<a name="44"></a><h3>45. Какое событие возникает при работе с веб-хранилищем?</h3>\n<p>При изменении хранилища в контексте другого документа возникает событие storage:</p>\n<pre><code>\nwindow<span class="code punctuation">.</span><span class="code function-variable function">onstorage</span> <span class="code operator">=</span> <span class="code keyword">function</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span><span class="code punctuation">}</span>\n</code></pre>\n<p>Пример обработки данного события:</p>\n<pre><code>\nwindow<span class="code punctuation">.</span><span class="code function-variable function">onstorage</span> <span class="code operator">=</span> <span class="code parameter">ev</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code template-string"><span class="code template-punctuation string">`</span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span>ev<span class="code punctuation">.</span>key<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string"> был изменен.\n    Старое значение: </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span>ev<span class="code punctuation">.</span>oldValue<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string">.\n    Новое значение: </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span>ev<span class="code punctuation">.</span>newValue<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string">.</span><span class="code template-punctuation string">`</span></span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span>\n</code></pre>\n<p>Данное событие, в частности, позволяет реализовать своего рода чат.</p>\n<nav>\n<a href="https://learn.javascript.ru/localstorage" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Web_Storage_API" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 46 --\x3e\n<section data-name="46">\n<a name="45"></a><h3>46. Для чего используется веб-хранилище?</h3>\n<p>Веб-хранилище является более безопасным и может хранить больший объем данных, чем куки, что не влияет на производительность. Кроме того, данные не отправляются на сервер (в случае с куки данные включаются в заголовки запроса и ответа при каждом обращении клиента к серверу). Поэтому такой способ хранения данных является более предпочтительным, чем куки.</p>\n<nav>\n<a href="https://learn.javascript.ru/localstorage" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Web_Storage_API" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 47 --\x3e\n<section data-name="47">\n<a name="46"></a><h3>47. Как определить поддержку веб-хранилища браузером?</h3>\n<p>Перед использованием веб-хранилища рекомендуется проверить поддержку данного интерфейса браузерами:</p>\n<pre><code>\n<span class="code keyword">if</span> <span class="code punctuation">(</span><span class="code keyword">typeof</span><span class="code punctuation">(</span>Storage<span class="code punctuation">)</span> <span class="code operator">!==</span> <span class="code string">\'undefined\'</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code comment">// код</span>\n<span class="code punctuation">}</span> <span class="code keyword">else</span> <span class="code punctuation">{</span>\n    <span class="code comment">// веб-хранилище не поддерживается</span>\n<span class="code punctuation">}</span>\n\n<span class="code comment">// или</span>\n<span class="code keyword">if</span> <span class="code punctuation">(</span><span class="code string">\'Storage\'</span> <span class="code keyword">in</span> window<span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code string">\'ok\'</span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span> <span class="code keyword">else</span> <span class="code punctuation">{</span>\n    console<span class="code punctuation">.</span><span class="code function">warn</span><span class="code punctuation">(</span><span class="code string">\'!ok\'</span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span>\n</code></pre>\n<p>По данным <a href="https://caniuse.com/#feat=namevalue-storage">CanIUse</a> поддержка веб хранилища на сегодняшний день составляет 98%.</p>\n<nav>\n<a href="https://learn.javascript.ru/localstorage" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Web_Storage_API" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 48 --\x3e\n<section data-name="48">\n<a name="47"></a><h3>48. Как определить поддержку сервис-воркеров браузером?</h3>\n<p>Перед использованием сервис-воркеров рекомендуется проверить поддержку данного интерфейса браузерами:</p>\n<pre><code>\n<span class="code keyword">if</span> <span class="code punctuation">(</span><span class="code keyword">typeof</span><span class="code punctuation">(</span>Worker<span class="code punctuation">)</span> <span class="code operator">!==</span> <span class="code keyword">undefined</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code comment">// код</span>\n<span class="code punctuation">}</span> <span class="code keyword">else</span> <span class="code punctuation">{</span>\n    <span class="code comment">// сервис-воркеры не поддерживаются</span>\n<span class="code punctuation">}</span>\n<span class="code comment">// или</span>\n<span class="code keyword">if</span> <span class="code punctuation">(</span><span class="code string">\'Worker\'</span> <span class="code keyword">in</span> window<span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code string">\'ok\'</span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span> <span class="code keyword">else</span> <span class="code punctuation">{</span>\n    console<span class="code punctuation">.</span><span class="code function">warn</span><span class="code punctuation">(</span><span class="code string">\'!ok\'</span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span>\n</code></pre>\n<p>По данным <a href="https://caniuse.com/#feat=serviceworkers">CanIUse</a> поддержка сервис-воркеров на сегодняшний день составляет 94,5%.</p>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/ServiceWorker" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 49 --\x3e\n<section data-name="49">\n<a name="48"></a><h3>49. Приведите пример веб-воркера</h3>\n<p>Для использования веб-воркера необходимости сделать следующее.</p>\n<p>Создать файл для воркера, например, counter.js:</p>\n<pre><code>\n<span class="code keyword">let</span> i <span class="code operator">=</span> <span class="code number">0</span>\n\n<span class="code keyword">function</span> <span class="code function">timedCount</span><span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    i <span class="code operator">=</span> i <span class="code operator">+</span> <span class="code number">1</span>\n    <span class="code function">postMessage</span><span class="code punctuation">(</span>i<span class="code punctuation">)</span>\n    <span class="code function">setTimeout</span><span class="code punctuation">(</span><span class="code string">\'timedCount()\'</span><span class="code punctuation">,</span> <span class="code number">500</span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span>\n\n<span class="code function">timedOut</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\n</code></pre>\n<p>Метод postMessage() используется для отправки сообщения странице.</p>\n<p>Создаем объект воркера:</p>\n<pre><code>\n<span class="code keyword">const</span> w <span class="code operator">=</span> <span class="code keyword">new</span> <span class="code class-name">Worker</span><span class="code punctuation">(</span><span class="code string">\'counter.js\'</span><span class="code punctuation">)</span>\n</code></pre>\n<p>После этого обрабатываем получение сообщений от воркера:</p>\n<pre><code>\nw<span class="code punctuation">.</span><span class="code function-variable function">onmessage</span> <span class="code operator">=</span> <span class="code parameter">ev</span> <span class="code operator">=&gt;</span> document<span class="code punctuation">.</span><span class="code function">querySelector</span><span class="code punctuation">(</span><span class="code string">\'.message\'</span><span class="code punctuation">)</span><span class="code punctuation">.</span>textContent <span class="code operator">=</span> ev<span class="code punctuation">.</span>data\n</code></pre>\n<p>Воркер будет продолжать обрабатывать событие message даже после того, как внешний скрипт выполнит свою работу, поэтому нужно принудительно его остановить:</p>\n<pre><code>\nw<span class="code punctuation">.</span><span class="code function">terminate</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\n</code></pre>\n<p>Если присвоить воркеру значение undefined, код можно будет использовать повторно:</p>\n<pre><code>\nw <span class="code operator">=</span> <span class="code keyword">undefined</span>\n</code></pre>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Web_Workers_API" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 50 --\x3e\n<section data-name="50">\n<a name="49"></a><h3>50. Назовите ограничения веб-воркеров по работе с DOM</h3>\n<p>Поскольку веб-воркеры создаются в отдельном файле, они не имеют доступа к следующим объектам:</p>\n<ul>\n<li>window</li>\n<li>Document</li>\n<li>Родительский объект, т.е. объект, запустивший воркер</li>\n</ul>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Web_Workers_API" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 51 --\x3e\n<section data-name="51">\n<a name="50"></a><h3>51. Что такое промис (обещание, promise)?</h3>\n<p>Промис - это объект, который либо выполняется с некоторым значением, либо отклоняется с ошибкой. Разрешение промиса происходит либо после истечения определенного времени, либо после возникновения определенного события. Промис может иметь одно из трех состояний: находится в режиме ожидания (pending), выполнен (fulfilled), отклонен (rejected).</p>\n<p>Синтаксис промиса:</p>\n<pre><code>\n<span class="code keyword">const</span> promise <span class="code operator">=</span> <span class="code keyword">new</span> <span class="code class-name">Promise</span><span class="code punctuation">(</span><span class="code punctuation">(</span><span class="code parameter">resolve<span class="code punctuation">,</span> reject</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n    <span class="code comment">// код</span>\n<span class="code punctuation">}</span><span class="code punctuation">)</span>\n\n<span class="code comment">// или, когда мы уверены, что промис выполнится успешно</span>\n<span class="code keyword">const</span> promise <span class="code operator">=</span> Promise<span class="code punctuation">.</span><span class="code function">resolve</span><span class="code punctuation">(</span>value<span class="code punctuation">)</span>\npromise<span class="code punctuation">.</span><span class="code function">then</span><span class="code punctuation">(</span><span class="code parameter">value</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n    <span class="code comment">// код</span>\n<span class="code punctuation">}</span><span class="code punctuation">)</span>\n</code></pre>\n<p>Пример использования промиса:</p>\n<pre><code>\n<span class="code keyword">const</span> promise <span class="code operator">=</span> <span class="code keyword">new</span> <span class="code class-name">Promise</span><span class="code punctuation">(</span><span class="code parameter">resolve</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n    <span class="code keyword">const</span> timer <span class="code operator">=</span> <span class="code function">setTimeout</span><span class="code punctuation">(</span><span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n        <span class="code function">resolve</span><span class="code punctuation">(</span><span class="code string">\'Привет от промиса!\'</span><span class="code punctuation">)</span>\n        <span class="code function">clearTimeout</span><span class="code punctuation">(</span>timer<span class="code punctuation">)</span>\n    <span class="code punctuation">}</span><span class="code punctuation">,</span> <span class="code number">5000</span><span class="code punctuation">)</span><span class="code punctuation">;</span>\n<span class="code punctuation">}</span><span class="code punctuation">,</span> <span class="code parameter">reject</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n    <span class="code function">reject</span><span class="code punctuation">(</span><span class="code string">\'Что-то пошло не так!\'</span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span><span class="code punctuation">)</span>\n\npromise\n    <span class="code punctuation">.</span><span class="code function">then</span><span class="code punctuation">(</span><span class="code parameter">value</span> <span class="code operator">=&gt;</span> console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>value<span class="code punctuation">)</span><span class="code punctuation">)</span>\n    <span class="code punctuation">.</span><span class="code function">catch</span><span class="code punctuation">(</span><span class="code parameter">error</span> <span class="code operator">=&gt;</span> console<span class="code punctuation">.</span><span class="code function">error</span><span class="code punctuation">(</span>error<span class="code punctuation">)</span><span class="code punctuation">)</span>\n    <span class="code punctuation">.</span><span class="code function">finally</span><span class="code punctuation">(</span><span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code string">\'Мы закончили\'</span><span class="code punctuation">)</span><span class="code punctuation">)</span> <span class="code comment">// в консоль будет выведено "Привет от промиса!" через 5 секунд и "Мы закончили"</span>\n</code></pre>\n<p>Алгоритм выполнения промиса:</p>\n<img src="img/3.png" alt="3">\n<nav>\n<a href="https://learn.javascript.ru/promise-basics" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 52 --\x3e\n<section data-name="52">\n<a name="51"></a><h3>52. Зачем нужны промисы?</h3>\n<p>Промисы используются для работы с асинхронным кодом. Они представляют собой альтернативу функциям обратного вызова, позволяя избежать так называемого "ада колбеков", делают код более чистым и читаемым.</p>\n<nav>\n<a href="https://learn.javascript.ru/promise-basics" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 53 --\x3e\n<section data-name="53">\n<a name="52"></a><h3>53. Назовите три возможных состояния промиса</h3>\n<p>У промисов существует три состояния:</p>\n<ul>\n<li>Ожидание: стадия перед началом выполнения операции</li>\n<li>Выполнен: успешное завершение операции</li>\n<li>Отклонен: неудачное выполнение операции. Выбрасывается исключение.</li>\n</ul>\n<nav>\n<a href="https://learn.javascript.ru/promise-basics" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 54 --\x3e\n<section data-name="54">\n<a name="53"></a><h3>54. Что такое функция обратного вызова (колбек)?</h3>\n<p>Колбек - это функция, которая передается другой функции в качестве аргумента. Данная функция (внутренняя) вызывается внутри родительской (внешней) для выполнения определенной операции. Рассмотрим простой пример:</p>\n<pre><code>\n<span class="code keyword">function</span> <span class="code function">callback</span><span class="code punctuation">(</span><span class="code parameter">name</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code function">alert</span><span class="code punctuation">(</span><span class="code template-string"><span class="code template-punctuation string">`</span><span class="code string">Привет, </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span>name<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string">!</span><span class="code template-punctuation string">`</span></span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span>\n\n<span class="code keyword">function</span> <span class="code function">outer</span><span class="code punctuation">(</span><span class="code parameter">cb</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code keyword">const</span> name <span class="code operator">=</span> <span class="code function">prompt</span><span class="code punctuation">(</span><span class="code string">\'Пожалуйста, введите свое имя\'</span><span class="code punctuation">)</span>\n    <span class="code function">cb</span><span class="code punctuation">(</span>name<span class="code punctuation">)</span>\n<span class="code punctuation">}</span>\n<span class="code function">outer</span><span class="code punctuation">(</span>callback<span class="code punctuation">)</span>\n</code></pre>\n<p>В приведенном примере функция outer запрашивает имя пользователя и записывает его в переменную name. Затем данная функция передает name функции callback, которая выводит приветствие с именем пользователя.</p>\n\n<nav>\n<a href="https://learn.javascript.ru/callbacks" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F_%D0%BE%D0%B1%D1%80%D0%B0%D1%82%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B2%D1%8B%D0%B7%D0%BE%D0%B2%D0%B0" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 55 --\x3e\n<section data-name="55">\n<a name="54"></a><h3>55. Зачем нужны колбеки?</h3>\n<p>Колбеки нужны, поскольку JavaScript - язык, управляемый событиями. Это означает, что вместо ожидания ответа на запрос или обработки определенного события, JS продолжает реагировать на другие события. Рассмотрим пример, в котором одна функция обращается к интерфейсу, а другая - выводит сообщение в консоль:</p>\n<pre><code>\n<span class="code keyword">function</span> <span class="code function">first</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code comment">// имитируем обращение к API</span>\n    <span class="code function">setTimeout</span><span class="code punctuation">(</span><span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code string">\'Вызвана первая функция.\'</span><span class="code punctuation">)</span><span class="code punctuation">,</span> <span class="code number">1000</span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span>\n\n<span class="code keyword">function</span> <span class="code function">second</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code string">\'Вызвана вторая функция.\'</span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span>\n\n<span class="code function">first</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\n<span class="code function">second</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\n<span class="code comment">// сначала будет выведено "Вызвана вторая функция.", затем "Вызвана первая функция."</span>\n</code></pre>\n<p>Как видите, JS не ожидает завершения первой функции, а продолжает выполнение кода. Поэтому колбеки используются для имитации асинхронности, предотвращая блокировку основного потока выполнения программы.</p>\n<nav>\n<a href="https://learn.javascript.ru/callbacks" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F_%D0%BE%D0%B1%D1%80%D0%B0%D1%82%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B2%D1%8B%D0%B7%D0%BE%D0%B2%D0%B0" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 56 --\x3e\n<section data-name="56">\n<a name="55"></a><h3>56. Что такое ад колбеков?</h3>\n<p>Ад колбеков - это антипаттерн, когда множество функций обратного вызова вложены друг в друга для реализации асинхронной логики. Такая структура кода сложна для восприятия и поддержки. Это выглядит примерно так:</p>\n<pre><code>\n<span class="code keyword">function</span> <span class="code function">first</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code keyword">return</span> <span class="code keyword">function</span> <span class="code function">second</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n        <span class="code keyword">return</span> <span class="code keyword">function</span> <span class="code function">third</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n            <span class="code keyword">return</span> <span class="code keyword">function</span> <span class="code function">fourth</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n                <span class="code comment">// и т.д.</span>\n            <span class="code punctuation">}</span>\n        <span class="code punctuation">}</span>\n    <span class="code punctuation">}</span>\n<span class="code punctuation">}</span>\n</code></pre>\n<p>Такой подход к написанию кода считается плохой практикой, кроме случаев каррирования (включая debounce и throttle) или частичного применения функций.</p>\n<nav>\n<a href="https://learn.javascript.ru/callbacks" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F_%D0%BE%D0%B1%D1%80%D0%B0%D1%82%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B2%D1%8B%D0%B7%D0%BE%D0%B2%D0%B0" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 57 --\x3e\n<section data-name="57">\n<a name="56"></a><h3>57. Что такое события, отправленные сервером (server-sent events, SSE)?</h3>\n<p>События, отправленные сервером - это технология пуш-уведомлений, позволяющая браузерам получать от сервера обновленные данные через HTTP-соединение без отправки запроса. Это один из способов коммуникации клиента и сервера, когда сообщения отправляются только сервером. Данная технология используется для обновления Facebook/Twitter, цен в магазинах, новостных лент и т.д.</p>\n<nav>\n<a href="https://learn.javascript.ru/server-sent-events" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Server-sent_events" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 58 --\x3e\n<section data-name="58">\n<a name="57"></a><h3>58. Как получать сообщения (уведомления или события), отправленные сервером?</h3>\n<p>Для этого используется объект "EventSource":</p>\n<pre><code>\n<span class="code keyword">if</span><span class="code punctuation">(</span><span class="code string">\'EventSource\'</span> <span class="code keyword">in</span> window<span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code keyword">const</span> source <span class="code operator">=</span> <span class="code keyword">new</span> <span class="code class-name">EventSource</span><span class="code punctuation">(</span><span class="code string">\'sse_generator.js\'</span><span class="code punctuation">)</span>\n    source<span class="code punctuation">.</span><span class="code function-variable function">onmessage</span> <span class="code operator">=</span> <span class="code parameter">event</span> <span class="code operator">=&gt;</span> document<span class="code punctuation">.</span><span class="code function">querySelector</span><span class="code punctuation">(</span><span class="code string">\'output\'</span><span class="code punctuation">)</span><span class="code punctuation">.</span>innerHTML <span class="code operator">+=</span> event<span class="code punctuation">.</span>data <span class="code operator">+</span> <span class="code string">\'\'</span>\n<span class="code punctuation">}</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/server-sent-events" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/EventSource" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 59 --\x3e\n<section data-name="59">\n<a name="58"></a><h3>59. Как проверить поддержку SSE браузером?</h3>\n<p>Это делается так:</p>\n<pre><code>\n<span class="code keyword">if</span> <span class="code punctuation">(</span><span class="code keyword">typeof</span> EventSource <span class="code operator">!==</span> <span class="code string">\'undefined\'</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code comment">// код</span>\n<span class="code punctuation">}</span> <span class="code keyword">else</span> <span class="code punctuation">{</span>\n    <span class="code comment">// SSE не поддерживается</span>\n<span class="code punctuation">}</span>\n\n<span class="code comment">// или</span>\n<span class="code punctuation">(</span><span class="code string">\'EventSource\'</span> <span class="code keyword">in</span> window<span class="code punctuation">)</span>\n    <span class="code operator">?</span> console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code string">\'ok\'</span><span class="code punctuation">)</span>\n    <span class="code operator">:</span> console<span class="code punctuation">.</span><span class="code function">warn</span><span class="code punctuation">(</span><span class="code string">\'!ok\'</span><span class="code punctuation">)</span>\n</code></pre>\n<p>По данным <a href="https://caniuse.com/#feat=eventsource">CanIUse</a> на сегодняшний день SSE поддерживается 95% браузеров.</p>\n<nav>\n<a href="https://learn.javascript.ru/server-sent-events" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Server-sent_events" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 60 --\x3e\n<section data-name="60">\n<a name="59"></a><h3>60. Какие события возникают при работе с SSE?</h3>\n<p>Вот список этих событий:</p>\n<table>\n<tbody><tr>\n<th>Событие</th>\n<th>Описание</th>\n</tr>\n<tr>\n<td>open</td>\n<td>Возникает при открытии соединения с сервером</td>\n</tr>\n<tr>\n<td>message</td>\n<td>Возникает при получении сообщения от сервера</td>\n</tr>\n<tr>\n<td>error</td>\n<td>Возникает при выбрасывании исключения</td>\n</tr>\n</tbody></table>\n<nav>\n<a href="https://learn.javascript.ru/server-sent-events" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Server-sent_events" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 61 --\x3e\n<section data-name="61">\n<a name="60"></a><h3>61. Назовите основные правила работы с промисами</h3>\n<p>Основными правилами работы с промисами является следующее:</p>\n<ul>\n<li>Промис - это объект, содержащий встроенный или стандартный метод then()</li>\n<li>Стадия ожидания промиса, обычно, заканчивается стадией его выполнения или отклонения</li>\n<li>Состояние выполненного или отклоненного промиса не должно меняться после его разрешения</li>\n<li>После разрешения промиса его значение также не должно меняться</li>\n</ul>\n<nav>\n<a href="https://learn.javascript.ru/promise-basics" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 62 --\x3e\n<section data-name="62">\n<a name="61"></a><h3>62. Что такое колбек в колбеке?</h3>\n<p>Вы можете вкладывать колбеки друг в друга с целью последовательного выполнения определенных операций:</p>\n<pre><code>\n<span class="code function">loadScript</span><span class="code punctuation">(</span><span class="code string">\'/script1.js\'</span><span class="code punctuation">,</span> <span class="code parameter">script</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code template-string"><span class="code template-punctuation string">`</span><span class="code string">Скрипт </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span>script<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string"> загружен.</span><span class="code template-punctuation string">`</span></span><span class="code punctuation">)</span>\n\n    <span class="code function">loadScript</span><span class="code punctuation">(</span><span class="code string">\'/script2.js\'</span><span class="code punctuation">,</span> <span class="code parameter">script</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n        console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code template-string"><span class="code template-punctuation string">`</span><span class="code string">Скрипт </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span>script<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string"> загружен.</span><span class="code template-punctuation string">`</span></span><span class="code punctuation">)</span>\n\n        <span class="code function">loadScript</span><span class="code punctuation">(</span><span class="code string">\'/script3.js\'</span><span class="code punctuation">,</span> <span class="code parameter">script</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n            console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code template-string"><span class="code template-punctuation string">`</span><span class="code string">Скрипт </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span>script<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string"> загружен.</span><span class="code template-punctuation string">`</span></span><span class="code punctuation">)</span>\n        <span class="code punctuation">}</span><span class="code punctuation">)</span>\n    <span class="code punctuation">}</span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span><span class="code punctuation">)</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/callbacks" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F_%D0%BE%D0%B1%D1%80%D0%B0%D1%82%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B2%D1%8B%D0%B7%D0%BE%D0%B2%D0%B0" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 63 --\x3e\n<section data-name="63">\n<a name="62"></a><h3>63. Что такое цепочка из промисов?</h3>\n<p>Последовательное выполнение нескольких асинхронных задач с помощью промисов называется цепочкой промисов. Рассмотрим пример:</p>\n<pre><code>\n<span class="code keyword">new</span> <span class="code class-name">Promise</span><span class="code punctuation">(</span><span class="code punctuation">(</span><span class="code parameter">resolve<span class="code punctuation">,</span> reject</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n    <span class="code keyword">const</span> id <span class="code operator">=</span> <span class="code function">setTimeout</span><span class="code punctuation">(</span><span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n        <span class="code function">resolve</span><span class="code punctuation">(</span><span class="code number">1</span><span class="code punctuation">)</span>\n        <span class="code function">clearTimeout</span><span class="code punctuation">(</span>id<span class="code punctuation">)</span>\n    <span class="code punctuation">}</span><span class="code punctuation">,</span> <span class="code number">1000</span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span><span class="code punctuation">)</span><span class="code punctuation">.</span><span class="code function">then</span><span class="code punctuation">(</span><span class="code parameter">result</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>result<span class="code punctuation">)</span> <span class="code comment">// 1</span>\n    <span class="code keyword">return</span> result <span class="code operator">*</span> <span class="code number">2</span>\n<span class="code punctuation">}</span><span class="code punctuation">)</span><span class="code punctuation">.</span><span class="code function">then</span><span class="code punctuation">(</span><span class="code parameter">result2</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>result2<span class="code punctuation">)</span> <span class="code comment">// 2</span>\n    <span class="code keyword">return</span> result2 <span class="code operator">*</span> <span class="code number">3</span>\n<span class="code punctuation">}</span><span class="code punctuation">)</span><span class="code punctuation">.</span><span class="code function">then</span><span class="code punctuation">(</span><span class="code parameter">result3</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n    console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>result3<span class="code punctuation">)</span> <span class="code comment">// 6</span>\n<span class="code punctuation">}</span><span class="code punctuation">)</span><span class="code punctuation">.</span><span class="code function">catch</span><span class="code punctuation">(</span><span class="code parameter">error</span> <span class="code operator">=&gt;</span> console<span class="code punctuation">.</span><span class="code function">error</span><span class="code punctuation">(</span>error<span class="code punctuation">)</span><span class="code punctuation">)</span>\n</code></pre>\n<p>Алгоритм выполнения:</p>\n<ul>\n<li>Первый промис разрешается со значением 1</li>\n<li>После этого, первый метод then() выводит это значение в консоль и возвращает его, умножая на 2</li>\n<li>Второй then() выводит результат первого then() в консоль (2) и возвращает результат, умножая его на 3</li>\n<li>Последний then() выводит результат второго then() в консоль (6)</li>\n<li>Блок catch служит для обработки ошибок</li>\n</ul>\n<nav>\n<a href="https://learn.javascript.ru/promise-basics" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 64 --\x3e\n<section data-name="64">\n<a name="63"></a><h3>64. Что такое Promise.all()?</h3>\n<p>Promise.all() - это промис, принимающий массив других промисов в качестве аргумента и возвращающий результаты выполненных промисов или ошибку при отклонении одного из них. Синтаксис:</p>\n<pre><code>\nPromise<span class="code punctuation">.</span><span class="code function">all</span><span class="code punctuation">(</span><span class="code punctuation">[</span>Promise1<span class="code punctuation">,</span> Promise2<span class="code punctuation">,</span> Promise3<span class="code punctuation">]</span><span class="code punctuation">)</span>\n    <span class="code punctuation">.</span><span class="code function">then</span><span class="code punctuation">(</span><span class="code parameter">results</span> <span class="code operator">=&gt;</span> console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>results<span class="code punctuation">)</span><span class="code punctuation">)</span>\n    <span class="code punctuation">.</span><span class="code function">catch</span><span class="code punctuation">(</span><span class="code parameter">error</span> <span class="code operator">=&gt;</span> console<span class="code punctuation">.</span><span class="code function">error</span><span class="code punctuation">(</span>error<span class="code punctuation">)</span><span class="code punctuation">)</span>\n</code></pre>\n<p>Помните, что порядок получения результатов зависит от порядка промисов в массиве.</p>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank">MDN</a>\n<a href="https://learn.javascript.ru/promise-api" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 65 --\x3e\n<section data-name="65">\n<a name="64"></a><h3>65. Что такое Promise.race()?</h3>\n<p>Метод Promise.race() возвращает результат первого выполненного или отклоненного промиса из переданных ему в виде массива промисов:</p>\n<pre><code>\n<span class="code keyword">const</span> promise1 <span class="code operator">=</span> <span class="code keyword">new</span> <span class="code class-name">Promise</span><span class="code punctuation">(</span><span class="code punctuation">(</span><span class="code parameter">resolve<span class="code punctuation">,</span> reject</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> <span class="code function">setTimeout</span><span class="code punctuation">(</span>resolve<span class="code punctuation">,</span> <span class="code number">500</span><span class="code punctuation">,</span> <span class="code string">\'один\'</span><span class="code punctuation">)</span><span class="code punctuation">)</span>\n\n<span class="code keyword">const</span> promise2 <span class="code operator">=</span> <span class="code keyword">new</span> <span class="code class-name">Promise</span><span class="code punctuation">(</span><span class="code punctuation">(</span><span class="code parameter">resolve<span class="code punctuation">,</span> reject</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> <span class="code function">setTimeout</span><span class="code punctuation">(</span>resolve<span class="code punctuation">,</span> <span class="code number">100</span><span class="code punctuation">,</span> <span class="code string">\'два\'</span><span class="code punctuation">)</span><span class="code punctuation">)</span>\n\nPromise<span class="code punctuation">.</span><span class="code function">race</span><span class="code punctuation">(</span><span class="code punctuation">[</span>promise1<span class="code punctuation">,</span> promise2<span class="code punctuation">]</span><span class="code punctuation">)</span><span class="code punctuation">.</span><span class="code function">then</span><span class="code punctuation">(</span><span class="code parameter">value</span> <span class="code operator">=&gt;</span> console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>value<span class="code punctuation">)</span><span class="code punctuation">)</span> <span class="code comment">// "два"</span>\n</code></pre>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise/race" target="_blank">MDN</a>\n<a href="https://learn.javascript.ru/promise-api" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 66 --\x3e\n<section data-name="66">\n<a name="65"></a><h3>66. Что такое строгий режим?</h3>\n<p>Для включения строго режима используется инструкция \'use strict\' (или "use strict") в начале всего кода или отдельной функции. Строгий режим был представлен в ES6. В данном режиме запрещены некоторые действия и выбрасывается больше исключений.</p>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Strict_mode" target="_blank">MDN</a>\n<a href="https://learn.javascript.ru/strict-mode" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 67 --\x3e\n<section data-name="67">\n<a name="66"></a><h3>67. Зачем нужен строгий режим?</h3>\n<p>Строгий режим позволяет писать более безопасный код, предотвращая возникновение многих ошибок. Например, он запрещает случайное создание глобальных переменных (без ключевого слова, variable = value), присваивание значения свойству, доступному только для чтения, свойству, которое можно получить только с помощью геттера, несуществующему свойству и несуществующей переменной или объекту. В нестрогом режиме во всех этих случаях исключение не выбрасывается.</p>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Strict_mode" target="_blank">MDN</a>\n<a href="https://learn.javascript.ru/strict-mode" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 68 --\x3e\n<section data-name="68">\n<a name="67"></a><h3>68. Как включить строгий режим?</h3>\n<p>Строгий режим включается с помощью инструкции \'use strict\' (или "use strict") в начале кода или функции. Обычно, данная инструкция указывается в самом начале скрипта, т.е. в глобальном пространстве имен:</p>\n<pre><code>\n<span class="code string">\'use strict\'</span>\nx <span class="code operator">=</span> <span class="code number">3.14</span> <span class="code comment">// Uncaught ReferenceError: x не определена</span>\n</code></pre>\n<p>Если \'use strict\' указывается в функции, то действие строгого режима распространяется только на эту функцию:</p>\n<pre><code>\nx <span class="code operator">=</span> <span class="code number">3.14</span> <span class="code comment">// все в порядке</span>\n<span class="code function">f</span><span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code comment">// Uncaught ReferenceError: y не определена</span>\n\n<span class="code keyword">function</span> <span class="code function">f</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    <span class="code string">\'use strict\'</span>\n    y <span class="code operator">=</span> <span class="code number">3.14</span>\n<span class="code punctuation">}</span>\n</code></pre>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Strict_mode" target="_blank">MDN</a>\n<a href="https://learn.javascript.ru/strict-mode" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 69 --\x3e\n<section data-name="69">\n<a name="68"></a><h3>69. Для чего используется двойное отрицание?</h3>\n<p>Двойное отрицание (!!) преобразует значение в логическое. Если значение является ложным, то возвращается false, иначе - true:</p>\n<pre><code>\n<span class="code keyword">const</span> x <span class="code operator">=</span> <span class="code number">1</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>x<span class="code punctuation">)</span> <span class="code comment">// 1</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code operator">!</span><span class="code operator">!</span>x<span class="code punctuation">)</span> <span class="code comment">// true</span>\n<span class="code keyword">const</span> y <span class="code operator">=</span> <span class="code string">\'\'</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>y<span class="code punctuation">)</span> <span class="code comment">// \'\'</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code operator">!</span><span class="code operator">!</span>str<span class="code punctuation">)</span> <span class="code comment">// false</span>\n</code></pre>\n<p>Обратите внимание: "!!" - это не отдельный оператор, а два оператора "!".</p>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_NOT" target="_blank">MDN</a>\n<a href="https://learn.javascript.ru/logical-ops" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 70 --\x3e\n<section data-name="70">\n<a name="69"></a><h3>70. Для чего используется оператор "delete"?</h3>\n<p>Данный оператор служит для удаления свойств объектов и значений этих свойств:</p>\n<pre><code>\n<span class="code keyword">const</span> user <span class="code operator">=</span> <span class="code punctuation">{</span>\n    name<span class="code operator">:</span> <span class="code string">\'Иван\'</span><span class="code punctuation">,</span>\n    age<span class="code operator">:</span> <span class="code number">20</span>\n<span class="code punctuation">}</span>\n\n<span class="code keyword">delete</span> user<span class="code punctuation">.</span>age\n\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>user<span class="code punctuation">)</span> <span class="code comment">// { name: "Иван" }</span>\n\n<span class="code keyword">delete</span> user <span class="code comment">// false</span>\n<span class="code comment">// в строгом режиме будет выброшено исключение Uncaught SyntaxError: использование оператора Delete в строгом режиме недопустимо</span>\n</code></pre>\n<p>Помните, что поскольку массив - это тоже объект, применение delete к элементу массива, удалит его значение и запишет в него undefined, т.е. индекс элемента массива сохранится и длина массива не изменится</p>\n<nav>\n<a href="https://learn.javascript.ru/object#literaly-i-svoystva" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/delete" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 71 --\x3e\n<section data-name="71">\n<a name="70"></a><h3>71. Для чего используется оператор "typeof"?</h3>\n<p>Данный оператор используется для определения типа переменной или выражения:</p>\n<pre><code>\n<span class="code keyword">typeof</span> <span class="code number">1</span> <span class="code comment">// number</span>\n<span class="code keyword">typeof</span> <span class="code punctuation">[</span><span class="code punctuation">]</span> <span class="code comment">// object</span>\n<span class="code keyword">typeof</span> <span class="code string">\'Иван Иванов\'</span> <span class="code comment">// string</span>\n<span class="code keyword">typeof</span> <span class="code punctuation">(</span><span class="code number">1</span> <span class="code operator">+</span> <span class="code number">2</span><span class="code punctuation">)</span> <span class="code comment">// number</span>\n\n<span class="code keyword">typeof</span> <span class="code keyword">null</span> <span class="code comment">// object (?)</span>\n<span class="code keyword">typeof</span> <span class="code number">NaN</span> <span class="code comment">// number (?)</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/types#type-typeof" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/typeof" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 72 --\x3e\n<section data-name="72">\n<a name="71"></a><h3>72. Что такое undefined?</h3>\n<p>undefined - это неопределенное (не отсутствующее) стандартное значение (значение по умолчанию) переменной, которой не было присвоено значения, а также необъявленной переменной. Это один из примитивных типов данных:</p>\n<pre><code>\n<span class="code keyword">let</span> name\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code keyword">typeof</span> name<span class="code punctuation">)</span> <span class="code comment">// undefined</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code keyword">typeof</span> age<span class="code punctuation">)</span> <span class="code comment">// undefined</span>\n</code></pre>\n<p>Данное значение может присваиваться переменным явно:</p>\n<pre><code>\nuser <span class="code operator">=</span> <span class="code keyword">undefined</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/types#znachenie-undefined" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/undefined" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 73 --\x3e\n<section data-name="73">\n<a name="72"></a><h3>73. Что такое null?</h3>\n<p>null - значение, представляющее собой отсутствие значения, установленное явно. Это один из примитивных типов данных. С помощью null можно удалить значение переменной:</p>\n<pre><code>\n<span class="code keyword">const</span> user <span class="code operator">=</span> <span class="code keyword">null</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code keyword">typeof</span> user<span class="code punctuation">)</span> <span class="code comment">// object</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/types#znachenie-null" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/null" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 74 --\x3e\n<section data-name="74">\n<a name="73"></a><h3>74. В чем разница между null и undefined?</h3>\n<p>Основные отличия состоят в следующем:</p>\n<table>\n<tbody><tr>\n<th>Null</th>\n<th>Undefined</th>\n</tr>\n<tr>\n<td>Присваивается в качестве индикатора отсутствия значения</td>\n<td>Является значением по умолчанию для переменных, которым не было присвоено значения, или необъявленных переменных</td>\n</tr>\n<tr>\n<td>Тип - object</td>\n<td>Тип - undefined</td>\n</tr>\n<tr>\n<td>Примитивный тип, означающий нуль, отсутствие значения или ссылки</td>\n<td>Примитивный тип, означающий, что переменной не было присвоено значения</td>\n</tr>\n<tr>\n<td>Указывает на отсутствие значения переменной</td>\n<td>Указывает на отсутствие переменной или неопределенность ее значения</td>\n</tr>\n</tbody></table>\n<nav>\n<a href="https://learn.javascript.ru/types#znachenie-undefined" target="_blank">JSR - undefined</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/undefined" target="_blank">MDN - undefined</a>\n<a href="https://learn.javascript.ru/types#znachenie-null" target="_blank">JSR - null</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/null" target="_blank">MDN - null</a>\n</nav>\n</section>\n\n\x3c!-- 75 --\x3e\n<section data-name="75">\n<a name="74"></a><h3>75. Что такое eval?</h3>\n<p>Функция eval() вычисляет переданную ей строку. Строка может быть выражением, переменной, одним или несколькими операторами:</p>\n<pre><code>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code function">eval</span><span class="code punctuation">(</span><span class="code string">\'1 + 2\'</span><span class="code punctuation">)</span><span class="code punctuation">)</span> <span class="code comment">// 3</span>\n\n<span class="code comment">// пример с каррированием</span>\n<span class="code keyword">const</span> <span class="code function-variable function">calc</span> <span class="code operator">=</span> <span class="code parameter">a</span> <span class="code operator">=&gt;</span> <span class="code parameter">b</span> <span class="code operator">=&gt;</span> <span class="code parameter">c</span> <span class="code operator">=&gt;</span>\n    <span class="code punctuation">(</span>c <span class="code operator">===</span> <span class="code string">\'+\'</span> <span class="code operator">||</span> c <span class="code operator">===</span> <span class="code string">\'-\'</span> <span class="code operator">||</span> c <span class="code operator">===</span> <span class="code string">\'*\'</span> <span class="code operator">||</span> c <span class="code operator">===</span> <span class="code string">\'/\'</span><span class="code punctuation">)</span>\n        <span class="code operator">?</span> <span class="code function">eval</span><span class="code punctuation">(</span><span class="code template-string"><span class="code template-punctuation string">`</span><span class="code string">a </span><span class="code interpolation"><span class="code interpolation-punctuation punctuation">&#36;{</span>c<span class="code interpolation-punctuation punctuation">}</span></span><span class="code string"> b</span><span class="code template-punctuation string">`</span></span><span class="code punctuation">)</span>\n        <span class="code operator">:</span> <span class="code string">\'Некорректная операция!\'</span>\n\n<span class="code function">calc</span><span class="code punctuation">(</span><span class="code number">10</span><span class="code punctuation">)</span><span class="code punctuation">(</span><span class="code number">5</span><span class="code punctuation">)</span><span class="code punctuation">(</span><span class="code string">\'+\'</span><span class="code punctuation">)</span> <span class="code comment">// 15</span>\n</code></pre>\n<p>Использовать не рекомендуется по причинам безопасности.</p>\n<nav>\n<a href="https://learn.javascript.ru/eval" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/eval" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 76 --\x3e\n<section data-name="76">\n<a name="75"></a><h3>76. В чем разница между window и document?</h3>\n<p>Основные отличия состоят в следующем:</p>\n<table>\n<tbody><tr>\n<th>Window</th>\n<th>Document</th>\n</tr>\n<tr>\n<td>Является корневым узлом (верхним элементом) любой страницы</td>\n<td>Является прямым потомков объекта window. Также известен как Document Object Model (DOM)</td>\n</tr>\n<tr>\n<td>Доступен по умолчанию (поэтому вместо window.property можно использовать property, например, вместо window.localStorage, можно использовать localStorage)</td>\n<td>Доступен через window.document или просто document</td>\n</tr>\n<tr>\n<td>Имеет методы alert(), prompt() и т.д., а также свойства document, location и др.</td>\n<td>Имеет методы getElementById(), getElementsByClassName(), querySelector() и т.д.</td>\n</tr>\n</tbody></table>\n<nav>\n<a href="https://learn.javascript.ru/global-object" target="_blank">JSR - Глобальный объект</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Window" target="_blank">MDN - window</a>\n<a href="https://learn.javascript.ru/dom-nodes" target="_blank">JSR - DOM</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/DOM" target="_blank">MDN - DOM</a>\n</nav>\n</section>\n\n\x3c!-- 77 --\x3e\n<section data-name="77">\n<a name="76"></a><h3>77. Как получить доступ к истории браузера?</h3>\n<p>Информацию об истории перемещений между страницами в браузере содержит свойство history объекта window. Для перехода к предыдущей или следующей странице следует использовать методы back(), next() или go():</p>\n<pre><code>\n<span class="code keyword">const</span> <span class="code function-variable function">goBack</span> <span class="code operator">=</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n    history<span class="code punctuation">.</span><span class="code function">back</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\n    <span class="code comment">// или</span>\n    history<span class="code punctuation">.</span><span class="code function">go</span><span class="code punctuation">(</span><span class="code operator">-</span><span class="code number">1</span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span>\n\n<span class="code keyword">const</span> <span class="code function-variable function">goForward</span> <span class="code operator">=</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> history<span class="code punctuation">.</span><span class="code function">forward</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\n</code></pre>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/History" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 78 --\x3e\n<section data-name="78">\n<a name="77"></a><h3>78. Какие типы данных существуют в JavaScript?</h3>\n<p>В JavaScript есть 8 основных типов:</p>\n<ul>\n<li>number для любых чисел: целочисленных или чисел с плавающей точкой, целочисленные значения ограничены диапазоном ±2<sup>53</sup></li>\n<li>bigint для целых чисел произвольной длины</li>\n<li>string для строк. Строка может содержать один или больше символов, нет отдельного символьного типа</li>\n<li> boolean для true/false</li>\n<li>null для неизвестных значений – отдельный тип, имеющий одно значение null</li>\n<li>undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined</li>\n<li>object для более сложных структур данных</li>\n<li>symbol для уникальных идентификаторов</li>\n</ul>\n<nav>\n<a href="https://learn.javascript.ru/types" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Data_structures" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 79 --\x3e\n<section data-name="79">\n<a name="78"></a><h3>79. Что делает isNaN()?</h3>\n<p>Функция isNaN() преобразует значение в число и проверяет, является ли оно NaN.</p>\n<pre><code>\n<span class="code function">isNaN</span><span class="code punctuation">(</span><span class="code string">\'hello\'</span><span class="code punctuation">)</span> <span class="code comment">// true</span>\n<span class="code function">isNaN</span><span class="code punctuation">(</span><span class="code number">100</span><span class="code punctuation">)</span> <span class="code comment">// false</span>\n</code></pre>\n<p>Более надежной версией данной функции является метод Number.isNaN(), представленный в ES6.</p>\n<nav>\n<a href="https://learn.javascript.ru/number" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/isNaN" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 80 --\x3e\n<section data-name="80">\n<a name="79"></a><h3>80. В чем разница между необъявленными и неопределенными переменными?</h3>\n<p>Основные отличия заключаются в следующем:</p>\n<table>\n<tbody><tr>\n<th>Необъявленные</th>\n<th>Неопределенные</th>\n</tr>\n<tr>\n<td>Не существуют в программе</td>\n<td>Были объявлены без присвоения значения</td>\n</tr>\n<tr>\n<td>Попытка доступа заканчивается ошибкой</td>\n<td>При попытке получить доступ возвращается undefined</td>\n</tr>\n<tr>\n<td>Поднимается (всплывает) в начало текущей области видимости</td>\n<td>Также поднимается, но без присвоенного значения, т.е. со значением undefined (поднимается только объявление, но не инициализация)</td>\n</tr>\n</tbody></table>\n<nav>\n<a href="https://learn.javascript.ru/variables" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/Variable" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 81 --\x3e\n<section data-name="81">\n<a name="80"></a><h3>81. Что такое глобальные переменные?</h3>\n<p>В браузере глобальные функции и переменные, объявленные с помощью ключевого слова "var", или без использованию ключевого слова (в нестрогом режиме), становятся свойствами глобального объекта window (не работает в модулях). Такие переменные доступны из любого места программы. Использовать глобальные переменные не рекомендуется. При необходимости создания глобальной переменной лучше сделать это явно:</p>\n<pre><code>\nwindow<span class="code punctuation">.</span>currentUser <span class="code operator">=</span> <span class="code punctuation">{</span>\n    name<span class="code operator">:</span> <span class="code string">\'Иван\'</span>\n<span class="code punctuation">}</span>\n\n<span class="code comment">// или</span>\nglobalThis<span class="code punctuation">.</span>currentUser <span class="code operator">=</span> <span class="code punctuation">{</span>\n    name<span class="code operator">:</span> <span class="code string">\'Иван\'</span>\n<span class="code punctuation">}</span>\n\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>currentUser<span class="code punctuation">.</span>name<span class="code punctuation">)</span> <span class="code comment">// Иван</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/global-object" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 82 --\x3e\n<section data-name="82">\n<a name="81"></a><h3>82. Какие проблемы влечет за собой создание глобальных переменных?</h3>\n<p>Создание глобальных переменных приводит к загрязнению глобального пространства имен, что может вызвать конфликт между названиями переменных. Это также усложняет отладку и тестирование кода.</p>\n<nav>\n<a href="https://learn.javascript.ru/global-object" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 83 --\x3e\n<section data-name="83">\n<a name="82"></a><h3>83. Что такое NaN?</h3>\n<p>Глобальное свойство NaN является значением, представляющим собой не число (Not-a-Number). Точнее, NaN указывает на то, что значение является неправильным, но все-таки числом. Поэтому typeof NaN возвращает number.</p>\n<pre><code>\n<span class="code function">parseInt</span><span class="code punctuation">(</span><span class="code string">\'bla\'</span><span class="code punctuation">)</span> <span class="code comment">// NaN</span>\nMath<span class="code punctuation">.</span><span class="code function">sqrt</span><span class="code punctuation">(</span><span class="code operator">-</span><span class="code number">1</span><span class="code punctuation">)</span> <span class="code comment">// NaN</span>\n</code></pre>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 84 --\x3e\n<section data-name="84">\n<a name="83"></a><h3>84. Что делает isFinite()?</h3>\n<p>Глобальная функция isFinite() преобразует аргумент в число и возвращает true, если оно является обычным (конечным) числом, т.е. не NaN, Infinity (положительная бесконечность), -Infinity (отрицательная бесконечность). В противном случае, возвращается false.</p>\n<pre><code>\n<span class="code function">isFinite</span><span class="code punctuation">(</span><span class="code number">Infinity</span><span class="code punctuation">)</span> <span class="code comment">// false</span>\n<span class="code function">isFinite</span><span class="code punctuation">(</span><span class="code operator">-</span><span class="code number">Infinity</span><span class="code punctuation">)</span> <span class="code comment">// false</span>\n<span class="code function">isFinite</span><span class="code punctuation">(</span><span class="code number">NaN</span><span class="code punctuation">)</span> <span class="code comment">// false</span>\n\n<span class="code function">isFinite</span><span class="code punctuation">(</span><span class="code number">100</span><span class="code punctuation">)</span> <span class="code comment">// true</span>\n</code></pre>\n<p>Также существует метод Number.isFinite(), который в отличие от isFinite() не преобразует аргумент в число перед проверкой.</p>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/isFinite" target="_blank">MDN</a>\n<a href="https://learn.javascript.ru/number" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 85 --\x3e\n<section data-name="85">\n<a name="84"></a><h3>85. Что такое поток событий (event flow)?</h3>\n<p>Поток событий (распространение событий) - это порядок, в котором событие возникает на странице. Когда вы кликаете по элементу, вложенному в другие элементы, перед тем как событие достигнет целевого элемента, оно последовательно пройдет через все его родительские элементы, начиная от глобального объекта window. Существует три стадии распространения события:</p>\n<ul>\n<li>Сверху вниз - стадия захвата или погружения</li>\n<li>Целевая стадия</li>\n<li>Снизу вверх - стадия всплытия</li>\n</ul>\n<nav>\n<a href="https://learn.javascript.ru/bubbling-and-capturing" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 86 --\x3e\n<section data-name="86">\n<a name="85"></a><h3>86. Что такое всплытие события?</h3>\n<p>Всплытие - это стадия распространения события, когда событие сначала регистрируется на целевом элементе, а затем по цепочке из предков данного элемента поднимается до самого верхнего (внешнего) элемента - глобального объекта window.</p>\n<nav>\n<a href="https://learn.javascript.ru/bubbling-and-capturing" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 87 --\x3e\n<section data-name="87">\n<a name="86"></a><h3>87. Что такое погружение или захват события?</h3>\n<p>Погружение - это стадия возникновения события, когда оно сначала регистрируется на самом верхнем (внешнем) элементе (глобальном объекте window), а затем спускается вниз по цепочке из предков до целевого элемента.</p>\n<nav>\n<a href="https://learn.javascript.ru/bubbling-and-capturing" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 88 --\x3e\n<section data-name="88">\n<a name="87"></a><h3>88. Как отправить форму на обработку?</h3>\n<p>Это можно сделать разными способами:</p>\n<pre><code>\n<span class="code keyword">function</span> <span class="code function">submitForm</span><span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    document<span class="code punctuation">.</span>forms<span class="code punctuation">[</span><span class="code number">0</span><span class="code punctuation">]</span><span class="code punctuation">.</span><span class="code function">submit</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\n<span class="code punctuation">}</span>\n\nform<span class="code punctuation">.</span><span class="code function-variable function">onsubmit</span> <span class="code operator">=</span> <span class="code keyword">function</span><span class="code punctuation">(</span><span class="code parameter">event</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    event<span class="code punctuation">.</span><span class="code function">preventDefault</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\n    <span class="code comment">// код</span>\n<span class="code punctuation">}</span>\n\nform<span class="code punctuation">.</span><span class="code function">addEventListener</span><span class="code punctuation">(</span><span class="code string">\'submit\'</span><span class="code punctuation">,</span> <span class="code parameter">event</span> <span class="code operator">=&gt;</span> <span class="code punctuation">{</span>\n    event<span class="code punctuation">.</span><span class="code function">preventDefault</span><span class="code punctuation">(</span><span class="code punctuation">)</span>\n    <span class="code comment">// код</span>\n<span class="code punctuation">}</span><span class="code punctuation">)</span>\n</code></pre>\n<p>Любая кнопка в форме по умолчанию имеет тип submit, т.е. служит для отправки формы.</p>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/HTMLFormElement/submit" target="_blank">MDN</a>\n<a href="https://learn.javascript.ru/forms-submit" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 89 --\x3e\n<section data-name="89">\n<a name="88"></a><h3>89. Как получить информацию об операционной системе?</h3>\n<p>Данную информацию содержит глобальный объект navigator. Некоторую часть этой информации можно получить через его свойство platform:</p>\n<pre><code>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>navigator<span class="code punctuation">.</span>platform<span class="code punctuation">)</span>\n</code></pre>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Navigator" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 90 --\x3e\n<section data-name="90">\n<a name="89"></a><h3>90. В чем разница между событиями "DOMContentLoaded" и "load"?</h3>\n<p>Событие "DOMContentLoaded" возникает, когда первоначальный HTML документ полностью загружен и разобран без ожидания полной загрузки таблиц стилей, изображений или фреймов. Событие "load" возникает после полной загрузки страницы, включая все дополнительные ресурсы.</p>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Document/DOMContentLoaded_event" target="_blank">MDN - DOMContentLoaded</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/Events/load" target="_blank">MDN - load</a>\n<a href="https://learn.javascript.ru/onload-ondomcontentloaded" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 91 --\x3e\n<section data-name="91">\n<a name="90"></a><h3>91. В чем разница между нативными, хостовыми (принадлежащими среде выполнения кода) и пользовательскими объектами?</h3>\n<p>Нативные объекты (native objects) являются частью языка и определяются в спецификации ECMAScript. Такими объектами являются, например, Number, String, Function, Object, Math, RegExp, Date и т.д. Хостовые объекты (host objects) предоставляются браузером или другой средой выполнения, например, Node.js. Такими объектами являются, например, window, document (DOM), XMLHttpRequest, Web API (стек вызовов - call stack, очередь задач - task queue) и др. Пользовательскими объектами (user objects) являются любые объекты, создаваемые в коде, например, объект, содержащий информацию о пользователе:</p>\n<pre><code>\n<span class="code keyword">const</span> user <span class="code operator">=</span> <span class="code punctuation">{</span>\n    name<span class="code operator">:</span> <span class="code string">\'Иван\'</span><span class="code punctuation">,</span>\n    age<span class="code operator">:</span> <span class="code number">20</span>\n<span class="code punctuation">}</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/object" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 92 --\x3e\n<section data-name="92">\n<a name="91"></a><h3>92. Какие средства используются для откладки кода?</h3>\n<p>Такими средствами являются:</p>\n<ul>\n<li>Инструменты разработчика в браузере, например, Chrome DevTools</li>\n<li>Выражение "debugger"</li>\n<li>Старый-добрый console.log()</li>\n</ul>\n<nav>\n<a href="https://learn.javascript.ru/debugging-chrome" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/debugger" target="_blank">MDN - debugger</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Console" target="_blank">MDN - Console</a>\n</nav>\n</section>\n\n\x3c!-- 93 --\x3e\n<section data-name="93">\n<a name="92"></a><h3>93. В чем заключаются преимущества и недостатки промисов по сравнению с колбеками?</h3>\n<p>Преимущества:</p>\n<ul>\n<li>Предотвращают ад колбеков</li>\n<li>Позволяют выполнять асинхронный код последовательно с помощью then()</li>\n<li>Позволяют выполнять асинхронный код параллельно с помощью Promise.all()</li>\n<li>Решают многие проблемы колбеков (слишком поздний или слишком ранний вызов, несколько вызовов вместо одного, скрытие ошибок)</li>\n</ul>\n<p>Недостатки</p>\n<ul>\n<li>Код становится сложнее писать</li>\n<li>Для обеспечения поддержки старыми браузерами нужен полифил (таких браузеров на сегодняшний день почти не осталось)</li>\n</ul>\n<nav>\n<a href="https://learn.javascript.ru/promise-basics" target="_blank">JSR - Промисы</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank">MDN - Promise</a>\n<a href="https://learn.javascript.ru/callbacks" target="_blank">JSR - Колбеки</a>\n<a href="https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F_%D0%BE%D0%B1%D1%80%D0%B0%D1%82%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B2%D1%8B%D0%B7%D0%BE%D0%B2%D0%B0" target="_blank">MDN - Callback</a>\n</nav>\n</section>\n\n\x3c!-- 94 --\x3e\n<section data-name="94">\n<a name="93"></a><h3>94. В чем разница между атрибутом и свойством элемента?</h3>\n<p>Когда браузер загружает страницу, он разбирает HTML и генерирует из него DOM-объекты. Для узлов-элементов большинство стандартных HTML-атрибутов автоматически становятся свойствами DOM-объектов. Т.е. атрибут элемента указывается в разметке, а его свойство в DOM. Например, для тега "body" с атрибутом id="page" у DOM-объекта будет свойство body.id="page".</p>\n<pre><code>\n<span class="code operator">&lt;</span>input type<span class="code operator">=</span><span class="code string">"text"</span> value<span class="code operator">=</span><span class="code string">"Доброе утро!"</span><span class="code operator">&gt;</span>\n<span class="code comment">// данный элемент имеет два атрибута: type и value</span>\n\n<span class="code keyword">const</span> input <span class="code operator">=</span> document<span class="code punctuation">.</span><span class="code function">querySelector</span><span class="code punctuation">(</span><span class="code string">\'input\'</span><span class="code punctuation">)</span>\n<span class="code comment">// получаем атрибут</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>input<span class="code punctuation">.</span><span class="code function">getAttribute</span><span class="code punctuation">(</span><span class="code string">\'value\'</span><span class="code punctuation">)</span><span class="code punctuation">)</span>\n<span class="code comment">// получаем свойство</span>\nconsole<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span>input<span class="code punctuation">.</span>value<span class="code punctuation">)</span>\n\n<span class="code comment">// меняем значение атрибута</span>\ninput<span class="code punctuation">.</span><span class="code function">setAttribute</span><span class="code punctuation">(</span><span class="code string">\'value\'</span><span class="code punctuation">,</span> <span class="code string">\'Добрый вечер!\'</span><span class="code punctuation">)</span>\n<span class="code comment">// меняем значение свойства</span>\ninput<span class="code punctuation">.</span>value <span class="code operator">=</span> <span class="code string">\'Добрый вечер!\'</span>\n</code></pre>\n<nav>\n<a href="https://learn.javascript.ru/dom-attributes-and-properties" target="_blank">JSR</a>\n</nav>\n</section>\n\n\x3c!-- 95 --\x3e\n<section data-name="95">\n<a name="94"></a><h3>95. Что такое политика общего происхождения (same-origin policy)?</h3>\n<p>Политика общего происхождения (одинакового источника) блокирует доступ к данным из другого источника. Источником является сочетание домена, хоста и порта. По умолчанию, совместное использование ресурсов (cross-origin resource sharing, CORS) запрещено, т.е. данные предоставляются только в ответ на запрос из того же источника, в котором они находятся. Это поведение можно изменить с помощью специальных HTTP-заголовков.</p>\n<nav>\n<a href="https://learn.javascript.ru/cross-window-communication" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/Security/Same-origin_policy" target="_blank">MDN - SOP</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/HTTP/CORS" target="_blank">MDN - CORS</a>\n</nav>\n</section>\n\n\x3c!-- 96 --\x3e\n<section data-name="96">\n<a name="95"></a><h3>96. Что делает void 0?</h3>\n<p>Оператор void вычисляет переданное выражение и возвращает undefined. Обычно, когда мы кликаем по ссылке, браузер загружает новую сраницу или перезагружает текущую. С помощью выражения "void(0)" можно этого избежать:</p>\n<pre><code>\n<span class="code operator">&lt;</span>a href<span class="code operator">=</span><span class="code string">"javascript:void(0)"</span> onclick<span class="code operator">=</span><span class="code string">"alert(\'Привет!\')"</span><span class="code operator">&gt;</span>Нажми на меня<span class="code operator">!</span>\n<span class="code operator">&lt;</span><span class="code operator">/</span>a<span class="code operator">&gt;</span></code></pre>\n<p>Перезагрузку страницы также можно предотвратить с помощью заглушки:</p>\n<pre><code>\n<span class="code operator">&lt;</span>a href<span class="code operator">=</span><span class="code string">"#"</span><span class="code operator">&gt;</span>Битая ссылка<span class="code operator">&lt;</span><span class="code operator">/</span>a<span class="code operator">&gt;</span>\n<span class="code comment">// в этом случае символ "#" добавляется к URL в адресной строке</span>\n</code></pre>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/void" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 97 --\x3e\n<section data-name="97">\n<a name="96"></a><h3>97. JavaScript - это компилируемый или интерпретируемый язык программирования?</h3>\n<p>Сам по себе JavaScript - это интерпретируемый язык программирования. Движок (runtime, engine) разбирает код, интерпретирует каждую строку и выполняет ее. Однако, в современных браузерах используется технология под названием "компиляция на лету" (just-in-time, JIT compilation), когда код компилируется перед выполнением. Это увеличивает время подготовки к выполнению кода, но существенно ускоряет само выполнение.</p>\n<nav>\n<a href="https://learn.javascript.ru/intro" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 98 --\x3e\n<section data-name="98">\n<a name="97"></a><h3>98. Чувствителен ли JavaScript к регистру?</h3>\n<p>Да, JavaScript чувствителен к регистру. Поэтому ключевые слова, названия переменных, функций и объектов должны быть идентичными при их использовании. Например, const somename и const someName - это разные переменные, typeof(1) - number, а typeOf 1 - ReferenceError: typeOf не определена.</p>\n<nav>\n<a href="https://learn.javascript.ru/intro" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 99 --\x3e\n<section data-name="99">\n<a name="98"></a><h3>99. Связаны ли Java и JavaScript?</h3>\n<p>Нет, это два совершенно разных языка программирования. Однако, они оба относятся к объектно-ориентированным языкам и, как и множество других языков, используют похожий синтаксис (if, else, for, switch, break, continue и т.д.). Java в JavaScript - это маркетинговый ход.</p>\n<nav>\n<a href="https://learn.javascript.ru/intro" target="_blank">JSR</a>\n<a href="https://developer.mozilla.org/ru/docs/Web/JavaScript" target="_blank">MDN</a>\n</nav>\n</section>\n\n\x3c!-- 100 --\x3e\n<section data-name="100">\n<a name="99"></a><h3>100. Что такое событие (event)?</h3>\n<p>Событие - это реакция браузера на определенное действие. Таким действием может быть действие пользователя, например, нажатие кнопки или ввод текста, загрузка страницы, получение ответа на запрос и т.д. (т.е. действия, приводящие к возникновению событий, не обязательно зависят от пользователя). События регистрируются с целью их дальнейшей обработки.</p>\n<pre><code>\nbutton<span class="code punctuation">.</span><span class="code function-variable function">onclick</span> <span class="code operator">=</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> <span class="code function">alert</span><span class="code punctuation">(</span><span class="code string">\'Привет!\'</span><span class="code punctuation">)</span>\n\ninput<span class="code punctuation">.</span><span class="code function">addEventListener</span><span class="code punctuation">(</span><span class="code string">\'change\'</span><span class="code punctuation">,</span> <span class="code keyword">function</span><span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code punctuation">{</span>\n    p<span class="code punctuation">.</span>textContent <span class="code operator">=</span> <span class="code keyword">this</span><span class="code punctuation">.</span>value\n<span class="code punctuation">}</span><span class="code punctuation">)</span>\n\nwindow<span class="code punctuation">.</span><span class="code function-variable function">onload</span> <span class="code operator">=</span> <span class="code punctuation">(</span><span class="code punctuation">)</span> <span class="code operator">=&gt;</span> console<span class="code punctuation">.</span><span class="code function">log</span><span class="code punctuation">(</span><span class="code string">\'Страница полностью загружена.\'</span><span class="code punctuation">)</span>\n</code></pre>\n<nav>\n<a href="https://developer.mozilla.org/ru/docs/Web/API/Event" target="_blank">MDN</a>\n<a href="https://learn.javascript.ru/introduction-browser-events#event-object" target="_blank">JSR</a>\n</nav>\n</section>\n\n<section data-name="101">\n<a name="articles"></a><h3>Дополнительная литература</h3>\n<nav>\n<a href="https://habr.com/ru/company/ruvds/blog/482472/" target="_blank">Habr - Из чего сделан JavaScript?</a>\n<a href="https://habr.com/ru/company/ruvds/blog/337460/" target="_blank">Habr - Как работает JS: о внутреннем устройстве V8 и оптимизации кода</a>\n<a href="https://medium.com/@stasonmars/%D1%80%D0%B0%D0%B7%D0%B1%D0%B8%D1%80%D0%B0%D0%B5%D0%BC%D1%81%D1%8F-%D1%81-%D0%BF%D1%83%D1%82%D0%B0%D0%BD%D0%B8%D1%86%D0%B5%D0%B9-%D0%BC%D0%B5%D0%B6%D0%B4%D1%83-javascript-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0%D0%BC%D0%B8-slice-splice-%D0%B8-split-6e72363baf1d" target="_blank">Medium - Разбираемся с путаницей между JavaScript методами slice(), splice() и split()</a>\n<a href="https://medium.com/better-programming/prototypes-in-javascript-5bba2990e04b" target="_blank">Medium - Prototypes in JavaScript</a>\n<a href="https://medium.com/madhash/understanding-prototypes-in-javascript-e466244da086" target="_blank">Medium - Understanding Prototypes in JavaScript</a>\n<a href="https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%B4%D1%80%D0%BE%D0%B1%D0%BD%D0%BE-%D0%BE-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0%D1%85-apply-call-%D0%B8-bind-%D0%BD%D0%B5%D0%BE%D0%B1%D1%85%D0%BE%D0%B4%D0%B8%D0%BC%D1%8B%D1%85-%D0%BA%D0%B0%D0%B6%D0%B4%D0%BE%D0%BC%D1%83-javascript-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%87%D0%B8%D0%BA%D1%83-ddd5f9b06290" target="_blank">Medium - Подробно о методах apply(), call() и bind(), необходимых каждому JavaScript разработчику</a>\n<a href="https://www.digitalocean.com/community/tutorials/understanding-map-and-set-objects-in-javascript-ru" target="_blank">DigitalOcean - Знакомство с объектами map и set в JavaScript</a>\n<a href="https://medium.com/better-programming/why-should-we-stop-using-objects-as-maps-in-javascript-19c0275da72f" target="_blank">Medium - Why Should We Stop Using Objects As Maps in JavaScript?</a>\n<a href="https://habr.com/ru/company/ruvds/blog/486690/" target="_blank">Habr - 5 рекомендаций по написанию качественных стрелочных функций</a>\n<a href="https://habr.com/ru/company/ruvds/blog/427295/" target="_blank">Habr - Каррирование функций в JavaScript</a>\n<a href="https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%BA%D0%B0%D1%80%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B2-javascript-5ec4a1d88827" target="_blank">Medium - Понимаем каррирование в JavaScript</a>\n<a href="https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983" target="_blank">Medium - Curry and Function Composition</a>\n<a href="https://habr.com/ru/company/ruvds/blog/477284/" target="_blank">Habr - Зачем в JavaScript нужен строгий режим?</a>\n<a href="https://medium.com/nmc-techblog/advanced-javascript-es6-temporal-dead-zone-default-parameters-and-let-vs-var-deep-dive-ca588fcde21b" target="_blank">Medium - Advanced JavaScript ES6 — Temporal Dead Zone, Default Parameters And Let vs Var — Deep dive!</a>\n<a href="https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%BD%D0%B5%D0%BC%D0%B5%D0%B4%D0%BB%D0%B5%D0%BD%D0%BD%D0%BE-%D0%B2%D1%8B%D0%B7%D1%8B%D0%B2%D0%B0%D0%B5%D0%BC%D1%8B%D0%B5-%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B8-iife-%D0%B8-%D0%BD%D0%B5%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE-%D0%B1%D0%BE%D0%BB%D1%8C%D1%88%D0%B5-ff8e9ba409eb" target="_blank">Medium - Понимаем немедленно вызываемые функции IIFE и немного больше</a>\n<a href="https://habr.com/ru/company/ruvds/blog/494868/" target="_blank">Habr - Почему пора перестать использовать JavaScript IIFE</a>\n<a href="https://habr.com/ru/company/ruvds/blog/332384/" target="_blank">Habr - Мемоизация в JS и ускорение функций</a>\n<a href="https://medium.com/@mike_wong/what-is-memoization-in-javascript-5c6cdef49ad2" target="_blank">Medium - What is Memoization in Javascript?</a>\n<a href="https://medium.com/@stasonmars/%D1%80%D0%B0%D0%B7%D0%B1%D0%B8%D1%80%D0%B0%D0%B5%D0%BC%D1%81%D1%8F-%D1%81-%D0%BF%D0%BE%D0%B4%D0%BD%D1%8F%D1%82%D0%B8%D0%B5%D0%BC-hoisting-%D0%B2-javascript-7d2d27bc51f1" target="_blank">Medium - Разбираемся с “поднятием” (hoisting) в JavaScript</a>\n<a href="https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript-ru" target="_blank">DigitalOcean - Понимание понятия классов в JavaScript</a>\n<a href="https://habr.com/ru/company/ruvds/blog/415377/" target="_blank">Habr - Как работает JS: классы и наследование, транспиляция в Babel и TypeScript</a>\n<a href="https://habr.com/ru/company/ruvds/blog/352198/" target="_blank">Habr - Классы и фабричные функции в JavaScript. Что выбрать?</a>\n<a href="https://medium.com/javascript-in-plain-english/javascript-classes-an-in-depth-look-part-1-47d8f4e77cbd" target="_blank">Medium - JavaScript Classes: An In-Depth look (Part 1)</a>\n<a href="https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%B7%D0%B0%D0%BC%D1%8B%D0%BA%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B2-javascript-%D1%80%D0%B0%D0%B7-%D0%B8-%D0%BD%D0%B0%D0%B2%D1%81%D0%B5%D0%B3%D0%B4%D0%B0-c211805b6898" target="_blank">Medium - Понимаем замыкания в JavaScript. Раз и навсегда</a>\n<a href="https://habr.com/ru/company/ruvds/blog/424967/" target="_blank">Habr - Замыкания в JavaScript для начинающих</a>\n<a href="https://habr.com/ru/company/ruvds/blog/513764/" target="_blank">Habr - Дэн Абрамов о замыканиях в JavaScript</a>\n<a href="https://habr.com/ru/post/501198/" target="_blank">Habr - Понимание (всех) «модульных» форматов и инструментов JavaScript</a>\n<a href="https://www.freecodecamp.org/news/javascript-modules-a-beginner-s-guide-783f7d7a5fcc/" target="_blank">FreeCodeCamp - JavaScript Modules: A Beginner’s Guide</a>\n<a href="https://habr.com/ru/company/ruvds/blog/466537/" target="_blank">Habr - Использование JavaScript-модулей в продакшне: современное состояние дел. Часть 1</a>\n<a href="https://medium.com/backticks-tildes/introduction-to-es6-modules-49956f580da" target="_blank">Medium - Introduction to ES6 modules</a>\n<a href="https://habr.com/ru/company/ruvds/blog/337038/" target="_blank">Habr - Области видимости в JavaScript</a>\n<a href="https://dmitripavlutin.com/javascript-scope/" target="_blank">DP - JavaScript Scope Explained in Simple Words</a>\n<a href="https://habr.com/ru/post/491840/" target="_blank">Habr - Визуализация работы сервис-воркеров</a>\n<a href="https://habr.com/ru/company/ruvds/blog/349858/" target="_blank">Habr - Как работает JS: сервис-воркеры</a>\n<a href="https://habr.com/ru/company/2gis/blog/345552/" target="_blank">Habr - Service Workers. Инструкция по применению</a>\n<a href="https://developers.google.com/web/fundamentals/primers/service-workers" target="_blank">GoogleDevelopers - Service Workers: an Introduction</a>\n<a href="https://habr.com/ru/post/491252/" target="_blank">Habr - 5 малоизвестных возможностей JSON.stringify()</a>\n<a href="https://habr.com/ru/post/500834/" target="_blank">Habr - Хранилище для веба</a>\n<a href="https://habr.com/ru/company/ruvds/blog/415505/" target="_blank">Habr - Как работает JS: системы хранения данных</a>\n<a href="https://webdevblog.ru/izuchaem-indexeddb/" target="_blank">WebDevBlog - Изучаем IndexedDB</a>\n<a href="https://developers.google.com/web/ilt/pwa/working-with-indexeddb" target="_blank">GoogleDevelopers - Working with IndexedDB</a>\n<a href="https://medium.com/free-code-camp/a-quick-but-complete-guide-to-indexeddb-25f030425501" target="_blank">Medium - A quick but complete guide to IndexedDB and storing data in browsers</a>\n<a href="https://habr.com/ru/post/496348/" target="_blank">Habr - Web Storage API: примеры использования</a>\n<a href="https://medium.com/@stasonmars/%D0%BA%D0%B0%D0%BA-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D1%82%D1%8C-%D1%81-localstorage-%D0%B2-javascript-5aad737535d4" target="_blank">Medium - Как работать с localStorage в JavaScript</a>\n<a href="https://habr.com/ru/company/ruvds/blog/348424/" target="_blank">Habr - Как работает JS: веб-воркеры и пять сценариев их использования</a>\n<a href="https://habr.com/ru/company/ruvds/blog/479268/" target="_blank">Habr - Прослушиватели событий и веб-воркеры</a>\n<a href="https://medium.com/young-coder/a-simple-introduction-to-web-workers-in-javascript-b3504f9d9d1c" target="_blank"> Medium - A Simple Introduction to Web Workers in JavaScript</a>\n<a href="https://habr.com/ru/company/ruvds/blog/418085/" target="_blank">Habr - Использование промисов в JavaScript</a>\n<a href="https://habr.com/ru/post/488762/" target="_blank">Habr - Элегантное асинхронное программирование с помощью промисов</a>\n<a href="https://habr.com/ru/post/501702/" target="_blank">Habr - Визуализация промисов и Async/Await</a>\n<a href="https://habr.com/ru/post/484466/" target="_blank">Habr - Распространенные ошибки при работе с промисами в JavaScript, о которых должен знать каждый</a>\n<a href="https://blog.bitsrc.io/understanding-throttling-and-debouncing-973131c1ba07" target="_blank">Medium - Understanding Throttling and Debouncing</a>\n<a href="https://redd.one/blog/debounce-vs-throttle" target="_blank">Redd - Debounce vs Throttle: Definitive Visual Guide</a>\n<a href="https://medium.com/conectric-networks/a-look-at-server-sent-events-54a77f8d6ff7" target="_blank">Medium - A Look at Server-Sent Events</a>\n<a href="https://habr.com/ru/company/tinkoff/blog/471718/" target="_blank">Habr - SSEGWSW: Server-Sent Events Gateway by Service Workers</a>\n<a href="https://developers.google.com/web/tools/chrome-devtools/javascript" target="_blank">GoogleDeveloper - Get Started with Debugging JavaScript in Chrome DevTools</a>\n<a href="https://docs.microsoft.com/ru-ru/visualstudio/javascript/debug-nodejs?view=vs-2019" target="_blank">Microsoft - Отладка приложения JavaScript или TypeScript в Visual Studio</a>\n<a href="https://habr.com/ru/post/514684/" target="_blank">Habr - Политика общего происхождения и CORS: визуальное руководство</a>\n</nav>\n</section>\n';